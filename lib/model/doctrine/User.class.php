<?php

/**
 * User
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class User extends BaseUser
{
    protected $_roles = null;
    protected $_is_dealer_user = null;

    const GAZETA_FILE_PATH = 'gazeta';
    const SURVEY_KEY = 'u65oHO2e1JTj7V08VY2e';

    const USER_GROUP_ADMIN = 1;
    const USER_GROUP_IMPORTER = 2;
    const USER_GROUP_REGIONAL_MANAGER = 28;

    const DESIGNER_ID = 22;

    function selectName()
    {
        $name = array();
        if ($this->getName())
            $name[] = $this->getName();
        if ($this->getSurname())
            $name[] = $this->getSurname();

        $name = implode(' ', $name);

        return $name ? $name : $this->getGroup()->getName();
    }

    function isDealerUser()
    {
        if ($this->_is_dealer_user !== null)
            return $this->_is_dealer_user;

        $user = $this->getDealerUsers()->getFirst();
        if (!$user || $user->getDealerId() == 0) {
            return false;
        }

        $this->_is_dealer_user = !!$user->getDealer();

        return $this->_is_dealer_user;
    }

    function isAdmin()
    {
        return $this->hasRole('admin');
    }

    function isSuperAdmin()
    {
        return $this->getGroup()->getId() == 1 ? true : false;
    }

    function isManager()
    {
        return $this->hasRole('manager');
    }

    function isImporter()
    {
        return $this->hasRole('importer');
    }

    function isSpecialist()
    {
        return $this->hasRole('specialist');
    }

    function isDesigner() {
        return $this->getGroupId() == self::DESIGNER_ID;
    }

    function isDealer() {
        return $this->hasRole('dealer');
    }

    function isRawDealer() {
        return !($this->isAdmin() || $this->isManager() || $this->isRegionalManager());
    }

    function isRegionalManager() {
        return $this->hasRole('regional_manager');
    }

    function hasRole($role)
    {
        $roles = $this->getRoles();
        return isset($roles[$role]);
    }

    function generateActivationKey()
    {
        $this->setActivationKey(md5('dfklbvmlbmgnvmspfkworeji' . mt_rand(10000, mt_getrandmax()) . '9304ru93hgf' . time()));
    }

    function checkActivationKey($key)
    {
        return $this->getActivationKey() && $this->getActivationKey() == $key;
    }

    function resetActivationKey()
    {
        $this->setActivationKey('');
    }

    /**
     * Returns dealer
     *
     * @return Dealer
     * @throws UserIsNotDealerException
     */
    function getDealer()
    {
        $user = null;
        foreach(DealerUserTable::getInstance()->createQuery('du')->where('user_id = ?', $this->getId())->innerJoin('du.Dealer d')->orderBy('d.dealer_type ASC')->execute() as $dealer_user_item) {
            if ($dealer_user_item->getDealer()->getDealerType() == Dealer::TYPE_PKW|| $dealer_user_item->getDealer()->getDealerType() == Dealer::TYPE_NFZ_PKW) {
                $user = $dealer_user_item;
                break;
            }
        }

        /*if(!$user)
          throw new UserIsNotDealerException($this);

        $dealer = $user->getDealer();
        if(!$dealer)
          throw new UserIsNotDealerException($this);*/

        if ($user) {
            return $user->getDealer();
        }

        return null;
    }

    function checkUserDealerAcceptServiceActivity($activityId)
    {
        $dealer = $this->getDealer();

        if ($dealer && DealersServiceDataTable::getInstance()
                ->createQuery('sd')
                ->leftJoin('sd.Dialog d')
                ->where('sd.dealer_id = ?', $dealer->getId())
                ->andWhere('d.activity_id = ?', $activityId)
                ->count() > 0
        ) {
            return true;
        }

        return false;
    }

    function getDealerUploadPath()
    {
        return sfConfig::get('app_dealer_upload_path') . '/' . $this->getDealer()->getNumber();
    }

    function getDealerFiles()
    {
        return F::getFiles($this->getDealerUploadPath());
    }

    /**
     * Returns dealer discussion
     *
     * @return Discussion
     * @throws UserIsNotDealerException
     */
    function getDealerDiscussion()
    {
        return DealerDiscussionTable::getInstance()->findDiscussion($this->getDealer());
    }

    /**
     * Array of roles identifiers
     *
     * @return array
     */
    protected function getRoles()
    {
        if ($this->_roles === null) {
            $this->_roles = array();

            $roles = RoleTable::getInstance()
                ->createQuery('r')
                ->innerJoin('r.GroupRoles gr WITH gr.group_id=?', $this->getGroupId())
                ->execute();

            foreach ($roles as $role)
                $this->_roles[$role->getRole()] = true;
        }
        return $this->_roles;
    }

    function getElapsedSummerServiceAction()
    {
        $f = $this->getElapsedDays(strtotime(date('d-m-Y')));
        $l = $this->getElapsedDays(strtotime($this->getSummerActionEndDate()));

        if ($l > $f)
            return $l - $f;

        return 0;
    }

    function getElapsedDaysSummerServiceAction2()
    {
        $f = $this->getElapsedDays(strtotime(date('d-m-Y')));

        $user = $this->getDealerUsers()->getFirst();
        if (!$user)
            return 0;

        $endDate = $user->getSummerServiceActionEndDate();
        if (empty($endDate))
            $l = $this->getElapsedDays(strtotime($endDate));

        if ($l > $f)
            return $l - $f;

        return 0;
    }


    function getElapsedDays($st)
    {
        return floor(($st / 3600) / 24);
    }

    function updateDealersList($dealers)
    {
        if ($dealers) {
            UserDealersTable::getInstance()
                ->createQuery()
                ->delete()
                ->where('user_id = ?', array($this->getId()))
                ->execute();


            foreach ($dealers as $dealer) {
                $row = new UserDealers();

                $row->setUserId($this->getId());
                $row->setDealerId($dealer);

                $row->save();
            }
        }
    }

    function getDealersList()
    {
        if (!is_null($this->getId())) {
            $result = UserDealersTable::getInstance()
                ->createQuery('r')
                ->select('r.dealer_id')
                ->where('r.user_id = ?', array($this->getId()))
                ->execute();

            $res = array();
            foreach ($result as $r)
                $res[$r->getDealerId()] = $r->getDealerId();

            return $res;
        }

        return array();
    }

    function hasDealersListFromNaturalPerson() {
        if (!is_null($this->getId())) {
            /*Get natural person from binded user, aka. regional_manager */
            $natural_person = NaturalPersonTable::getInstance()->createQuery()->where('regional_manager_id = ?', $this->getId())->fetchOne();
            if ($natural_person) {
                $res = array();

                $dealers_result = DealerTable::getInstance()->createQuery('d')->select('d.id')->where('regional_manager_id = ?', $natural_person->getId())->execute();
                foreach ($dealers_result as $dealer) {
                    $res[$dealer->getId()] = $dealer->getId();
                }

                return $res;
            }
        }

        return array();
    }

    public function getBindedDealersList() {
        return DealerUserTable::getInstance()->createQuery('du')
            ->innerJoin('du.Dealer d')
            ->where('du.user_id = ?', $this->getId())
            ->orderBy('d.number ASC')
            ->execute();
    }

    function isUserDealerServiceSummerStatusActive()
    {
        $dealer = $this->getDealerUsers()->getFirst();
        if (!$dealer) {
            return true;
        }

        $result = DealerUserServiceActionTable::getInstance()
            ->createQuery('q')
            ->select('*')
            ->where('dealer_id = ?', $dealer->getDealerId())
            ->fetchOne();
        if (!$result)
            return false;

        $endDate = $result->getSummerServiceActionEndDate();
        if (empty($endDate))
            return false;

        return true;
    }

    function isWinterServiceActionAccepted()
    {
        $dealer = $this->getDealerUsers()->getFirst();
        if (!$dealer) {
            return true;
        }

        $result = DealerWinterServiceActionTable::getInstance()
            ->createQuery('q')
            ->select('*')
            ->where('dealer_id = ?', $dealer->getDealerId())
            ->fetchOne();
        if (!$result)
            return false;

        $endDate = $result->getEndDate();
        if (empty($endDate))
            return false;

        return true;
    }

    function isSpringServiceActionAccepted()
    {
        $dealer = $this->getDealerUsers()->getFirst();
        if (!$dealer) {
            return true;
        }

        $result = DealerSpringServiceActionTable::getInstance()
            ->createQuery('q')
            ->select('*')
            ->where('dealer_id = ?', $dealer->getDealerId())
            ->fetchOne();
        if (!$result)
            return false;

        $endDate = $result->getEndDate();
        if (empty($endDate))
            return false;

        return true;
    }

    function isDealerUserProdOfYear3Active()
    {
        $dealer = $this->getDealerUsers()->getFirst();
        if (!$dealer) {
            return true;
        }

        $result = DealerUserProdOfYear3Table::getInstance()
            ->createQuery('q')
            ->select('*')
            ->where('dealer_id = ?', $dealer->getDealerId())
            ->fetchOne();
        if ($result)
            return true;

        return false;
    }

    function getGazetaFiles()
    {
        $dealer = $this->getDealerUsers()->getFirst();
        if (!$dealer) {
            return '';
        }

        $dealer = DealerTable::getInstance()->createQuery('d')->where('id = ?', $dealer->getDealerId())->fetchOne();
        $dealerNumber = substr($dealer->getNumber(), 5);

        /*$total = GazetaFilesTable::getInstance()->createQuery()->select()->where('dealer_index = ?', $dealerNumber)->count();
        if($total != 0)
          return '';*/

        $path = sfConfig::get('sf_upload_dir') . '/' . self::GAZETA_FILE_PATH;
        $dir = opendir($path);

        while ($file = readdir($dir)) {
            if (!is_dir($file)) {
                $fileTmp = explode("_", $file);
                if (is_array($fileTmp) && $fileTmp[count($fileTmp) - 1] == 'prepress.pdf') {
                    if ($fileTmp[2] == $dealerNumber || $fileTmp[1] == $dealerNumber) {
                        closedir($dir);
                        unset($dir);

                        $file = pathinfo($file);

                        return $file['filename'] . '.' . $file['extension'];
                    }
                }
            }
        }

        closedir($dir);
        unset($dir);

        return '';
    }

    function getGazetaOffsetFiles()
    {
        $dealer = $this->getDealerUsers()->getFirst();
        if (!$dealer) {
            return '';
        }

        $dealer = DealerTable::getInstance()->createQuery('d')->where('id = ?', $dealer->getDealerId())->fetchOne();
        $dealerNumber = substr($dealer->getNumber(), 5);

        /*$total = GazetaFilesTable::getInstance()->createQuery()->select()->where('dealer_index = ?', $dealerNumber)->count();
        if($total != 0)
          return '';*/

        $path = sfConfig::get('sf_upload_dir') . '/' . self::GAZETA_FILE_PATH;
        $dir = opendir($path);

        while ($file = readdir($dir)) {
            if (!is_dir($file)) {
                $fileTmp = explode("_", $file);

                if (is_array($fileTmp) && $fileTmp[count($fileTmp) - 1] == 'offset.pdf') {
                    if ($fileTmp[2] == $dealerNumber || $fileTmp[1] == $dealerNumber) {
                        closedir($dir);
                        unset($dir);

                        $file = pathinfo($file);

                        return $file['filename'] . '.' . $file['extension'];
                    }
                }
            }
        }

        closedir($dir);
        unset($dir);

        return '';
    }

    function getEncodedToken()
    {
        $dealerNumber = '';
        $dealerName = '';

        $userDealer = $this->getDealerUsers()->getFirst();
        if ($userDealer) {
            $dealer = DealerTable::getInstance()->createQuery('d')->where('id = ?', $userDealer->getDealerId())->fetchOne();

            if ($dealer) {
                $dealerName = $dealer->getName();
                $dealerNumber = $dealer->getNumber();
            }
        }

        $token = Utils::oi_encode_token(json_encode(array("user_name" => $this->getEmail(),
            "email" => $this->getEmail(),
            "user_url" => sfConfig::get('app_site_url'),
            "first_name" => $this->getName(),
            "last_name" => $this->getSurname(),
            "company" => $this->getCompanyName(),
            "position" => $this->getPost(),
            "company_type" => $this->getCompanyType(),
            "dealerName" => $dealerName,
            "dealerNumber" => $dealerNumber,
        )),
            self::SURVEY_KEY);
        return $token;
    }

    function isPostSelected()
    {
        $post = UsersPostTable::getInstance()->createQuery()->where('user_id = ?', $this->getId())->fetchOne();

        if ($post) {
            return true;
        }

        return false;
    }

    public function isUserCertificateActive()
    {
        if (!$this->getDealer()) {
            return false;
        }

        $item = AgreementModelUserSettingsTable::getInstance()->createQuery()->where('dealer_id = ?', $this->getDealer()->getId())->fetchOne();
        if ($item) {
            if (!$item->getActivity()->checkForCertificateEnd($this) || $item->getActivity()->isActivityStatisticComplete($this, null, true)) {
                return false;
            }

            return true;
        }

        return false;
    }

    /**
     * �������� �� ���������� ����������� ����������
     */
    public function checkForFillExtendedStatistic()
    {
        if (!$this->getDealer()) {
            return false;
        }

        $isFill = false;
        $items = AgreementModelUserSettingsTable::getInstance()
            ->createQuery('ams')
            ->leftJoin('ams.Activity a')
            ->where('ams.dealer_id = ?', $this->getDealer()->getId())
            ->andWhere('year(a.start_date) = ?', date('Y'))
            ->execute();

        foreach ($items as $item) {
            $count = ActivityExtendedStatisticFieldsDataTable::getInstance()
                ->createQuery('fd')
                ->leftJoin('fd.Field f')
                ->where('fd.dealer_id = ?', $this->getDealer()->getId())
                ->andWhere('f.activity_id = ?', $item->getActivityId())
                ->andWhere('fd.concept_id != ?', 0)
                ->count();
            if ($count > 0) {
                $isFill = true;
            }
        }

        return $isFill;
    }

    public function getModelsUserDealerCount($activity_id) {
        if (!$this->getDealer()) {
            return 0;
        }

        return AgreementModelTable::getInstance()->createQuery()->where('dealer_id = ? and activity_id = ?', array($this->getDealer()->getId(), $activity_id))->count();
    }

    /**
     * Получаем должность пользователя
     * С учетом доработок, оставляем совместимоть со старой версией (должность записывается строкой)
     * В новой версии, должность привязывется к индексу
     * @return string
     */
    public function getPostName() {
        $post = $this->getPost();
        if (is_numeric($post)) {
            $user_post = UsersDepartmentsTable::getInstance()->find($post);
            if ($user_post) {
                return $user_post->getName();
            }
        }

        return $post;
    }
}
