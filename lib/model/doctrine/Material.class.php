<?php

/**
 * Material
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Material extends BaseMaterial
{
    const FILE_PREVIEW_PATH = 'materials/preview';

    protected $first_preview = null;

    function setUp()
    {
        parent::setUp();

        $this->addListener(new UploadHelper('file_preview', self::FILE_PREVIEW_PATH));
    }

    function markAsViewed(User $user)
    {
        if ($this->isViewed($user))
            return;

        $view = new MaterialUserView();
        $view->setMaterial($this);
        $view->setUser($user);
        $view->save();
    }

    function isViewed(User $user)
    {
        return MaterialUserViewTable::getInstance()
            ->createQuery()
            ->where('material_id=? and user_id=?', array($this->getId(), $user->getId()))
            ->count() > 0;
    }

    function getFirstPreview()
    {
        if ($this->first_preview === null) {
            $this->first_preview = MaterialWebPreviewTable::getInstance()
                ->createQuery()
                ->where('material_id=?', $this->getId())
                ->orderBy('id')
                ->limit(1)
                ->fetchOne();
        }
        return $this->first_preview;
    }

    /**
     * Returns a file name helper for model
     *
     * @return FileNameHelper
     */
    function getPreviewFileNameHelper()
    {
        return new FileNameHelper(sfConfig::get('sf_upload_dir') . '/' . self::FILE_PREVIEW_PATH . '/' . $this->getFilePreview());
    }

    function getActivitiesList()
    {
        if (!is_null($this->getId())) {
            $result = ActivityMaterialsTable::getInstance()
                ->createQuery('r')
                ->select('r.activity_id')
                ->where('r.material_id = ?', array($this->getId()))
                ->execute();

            $res = array();
            foreach ($result as $r) {
                $res[] = $r->getActivityId();
            }

            return $res;
        }

        return array();
    }

    public function getActivities() {
        $result = array();

        $items = ActivityMaterialsTable::getInstance()
            ->createQuery('am')
            ->select('activity_id')
            ->where('material_id = ?', $this->getId())
            ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        foreach ($items as $item) {
            if (!array_key_exists($item['activity_id'], $result)) {
                $activity = ActivityTable::getInstance()->createQuery()->select('name')->where('id = ?', $item['activity_id'])->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
                if ($activity) {
                    $result[$item['activity_id']] = $activity;
                }
            }
        }

        return $result;
    }

    function updateActivitiesList($activites)
    {
        ActivityMaterialsTable::getInstance()
            ->createQuery()
            ->delete()
            ->where('material_id = ?', array($this->getId()))
            ->execute();

        $activites = is_array($activites) ? array_values($activites) : $activites;
        foreach ($activites as $activity) {
            $item = new ActivityMaterials();
            $item->setArray(
                array(
                    'activity_id' => $activity,
                    'material_id' => $this->getId()
                )
            );
            $item->save();
        }
    }
}
