<?php

/**
 * DealerWorkStatisticTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DealerWorkStatisticTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object DealerWorkStatisticTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('DealerWorkStatistic');
    }

    /**
     * Compare two first items
     * @param $items
     */
    public static function compareItems($items) {
        $items_list = explode(',', $items);

        $left_item = array_shift($items_list);
        $right_item = array_shift($items_list);

        $left_item_models = self::getModelsByParent($left_item);
        $right_item_models = self::getModelsByParent($right_item);

        return array
        (
            'left' => array
            (
                'item_data' => DealerWorkStatisticTable::getInstance()->find($left_item),
                'models' => $left_item_models,
                'activities_with_comp_stat' => count(self::getActivities($left_item, Activity::STATISTIC_COMPLETED)),
                'activities_without_comp_stat' => count(self::getActivities($left_item, Activity::STATISTIC_NOT_COMPLETED)),
                'compared_models' => self::compareModelsList($left_item_models, $right_item_models),
                'compared_activities_with_completed_stat' => self::compareActivitesList(self::getActivities($left_item, Activity::STATISTIC_COMPLETED), self::getActivities($right_item, Activity::STATISTIC_COMPLETED)),
                'compared_activities_without_completed_stat' => self::compareActivitesList(self::getActivities($left_item, Activity::STATISTIC_NOT_COMPLETED), self::getActivities($right_item, Activity::STATISTIC_NOT_COMPLETED)),
                'activities_comp' => self::getActivities($left_item, Activity::STATISTIC_COMPLETED),
                'activities_not_comp' => self::getActivities($left_item, Activity::STATISTIC_NOT_COMPLETED)
            ),
            'right' => array
            (
                'item_data' => DealerWorkStatisticTable::getInstance()->find($right_item),
                'models' => $right_item_models,
                'activities_with_comp_stat' => count(self::getActivities($right_item, Activity::STATISTIC_COMPLETED)),
                'activities_without_comp_stat' => count(self::getActivities($right_item, Activity::STATISTIC_NOT_COMPLETED)),
                'compared_models' => self::compareModelsList($right_item_models, $left_item_models),
                'compared_activities_with_completed_stat' => self::compareActivitesList(self::getActivities($right_item, Activity::STATISTIC_COMPLETED), self::getActivities($left_item, Activity::STATISTIC_COMPLETED)),
                'compared_activities_without_completed_stat' => self::compareActivitesList(self::getActivities($right_item, Activity::STATISTIC_NOT_COMPLETED), self::getActivities($left_item, Activity::STATISTIC_NOT_COMPLETED)),
                'activities_comp' => self::getActivities($right_item, Activity::STATISTIC_COMPLETED),
                'activities_not_comp' => self::getActivities($right_item, Activity::STATISTIC_NOT_COMPLETED)
            )
        );
    }

    private static function compareModelsList($models1, $models2) {
        $models1_list = array();
        $models2_list = array();

        foreach ($models1 as $model) {
            $models1_list[] = $model->getModelId();
        }

        foreach ($models2 as $model) {
            $models2_list[] = $model->getModelId();
        }

        return array('not_compared' => array_diff($models1_list, $models2_list), 'models' => $models1_list);
    }

    private static function getModelsByParent($parent_id) {
        return DealerWorkStatisticModelsTable::getInstance()
            ->createQuery()
            ->select('model_id')
            ->where('parent_id = ?', $parent_id)
            ->orderBy('model_id ASC')
            ->execute();
    }

    private static function getActivities($parent_id, $status) {
        $items = DealerWorkStatisticActivitiesTable::getInstance()->createQuery()
            ->select('activity_id')
            ->where('parent_id = ? and statistic_complete = ?', array($parent_id, $status))
            ->orderBy('activity_id ASC')
            ->execute();

        $result = array();
        foreach ($items as $item) {
            $result[$item->getActivityId()] = $item->getActivityId();
        }

        return $result;
    }

    private static function compareActivitesList($left, $right) {
        return array_diff($left, $right);
    }
}