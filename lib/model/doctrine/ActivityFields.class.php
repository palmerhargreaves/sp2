<?php

/**
 * ActivityFields
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ActivityFields extends BaseActivityFields
{
    const FIELD_FILE_PATH = '/activities/module/statistics';
    const FIELD_FILE_FULL_PATH = '/var/www/vwgroup/data/www/dm.vw-servicepool.ru/www/uploads/activities/module/statistics';

    public function getFieldByDealer(User $user, $quarter)
    {
        $field = null;

        if (empty($quarter)) {
            $quarter = D::getQuarter(date('d-m-Y'));
        }

        $dealerId = DealerUserTable::getInstance()->createQuery()->select('dealer_id')->where('user_id = ?', $user->getId())->fetchOne();
        if ($dealerId) {
            $dealer = DealerTable::getInstance()->find($dealerId->getDealerId());

            $field = ActivityFieldsValuesTable::getInstance()->createQuery()->select('*')
                ->where('dealer_id = ? and field_id = ? and q = ?',
                    array
                    (
                        $dealer->getId(),
                        $this->getId(),
                        $quarter,
                        //date('Y')
                    )
                )
                ->fetchOne();

            if (!$field) {
                $field = new ActivityFieldsValues();

                $field->setCreatedAt(date('Y-m-d H:i:s'));
                $field->setDealerId($dealer->getId());
                $field->setFieldId($this->getId());
                $field->setQ($quarter);
                $field->setVal($this->getType() == "date" ? sprintf("%s-%s", date("d.m.Y"), date("d.m.Y")) : 0);

                $field->save();
            }
        }

        return $field;
    }

    public function getGroupName() {
        $group = ActivityVideoRecordsStatisticsHeadersGroupsTable::getInstance()->find($this->getGroupId());
        if ($group) {
            return $group->getHeader();
        }

        return 'Без группы';
    }

    public function getFieldValue(User $user, $q = 0) {
        $dealer = $user->getDealer();

        $query = ActivityFieldsValuesTable::getInstance()
            ->createQuery()
            ->where('field_id = ? and dealer_id = ?', array($this->getId(), $dealer->getId()));

        if ($q != 0) {
            $query->andWhere('q = ?', $q);
        }

        return $query->execute()->getFirst();
    }

    public static function saveData(sfWebRequest $request, $my_user, $files, $to_importer = false, $activity = null) {
        $items = json_decode($request->getParameter('txt_frm_fields_data'));

        $user = $my_user->getAuthUser();
        $result = array('success' => false, 'msg' => '');
        foreach ($items as $key => $data) {
           $result['success'] = self::saveFieldData($request, $data->id, $data->value, $my_user);
        }

        $allowed_file_types = array('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.openxmlformats');
        if (!empty($files)) {
            foreach ($files as $file_key => $file_data) {
                if (isset($file_data['name']) && !empty($file_data['name'])) {
                    if (in_array($file_data['type'], $allowed_file_types)) {

                        $file_key_exploded = explode('_', $file_key);
                        $file_key_data = $file_key_exploded[count($file_key_exploded) - 1];

                        $uniq_model = new UniqueFileNameGenerator(sfConfig::get('app_uploads_path') . ActivityFields::FIELD_FILE_PATH);
                        $gen_file_name = $uniq_model->generate($file_data['name']);

                        if (move_uploaded_file($file_data['tmp_name'], sfConfig::get('app_uploads_path') . ActivityFields::FIELD_FILE_PATH . '/' . $gen_file_name)) {
                            self::saveFieldData($request, $file_key_data, $gen_file_name, $my_user);
                        }
                    } else {
                        $result['success'] = false;
                        $result['msg'] = sprintF('%s (%s).', 'Неверный формат файла ', $file_data['type']);
                    }
                }
            }
        }

        //Если для активности разрешено отправлять нескольько раз данные на согласование, фиксируем дату последних изменений в данных
        if ($activity && $activity->isVideoRecordStatisticsActive()) {
            $statistic = $activity->getActivityVideoStatistics()->getFirst();
        }

        if ($result['success']) {
            $year = $my_user->getCurrentYear() != 0 ? $my_user->getCurrentYear() : D::getYear(D::calcQuarterData(date('d-m-Y')));

            $query = ActivityDealerStaticticStatusTable::getInstance()->createQuery()->where('dealer_id = ? and activity_id = ? and year = ?',
                array
                (
                    $user->getDealer()->getId(),
                    $request->getParameter('activity'),
                    $year
                )
            );

            $request_q = $request->getParameter('quarter');
            $request_q = !empty($request_q) && $request_q != 0 ? $request_q : D::getQuarter(D::calcQuarterData(time()));

            $curr_quarter = $my_user->getCurrentQuarter() != 0 ? $my_user->getCurrentQuarter() : $request_q;
            $quarter = 'q'.$curr_quarter;

            $item = $query->fetchOne();
            if (!$item) {
                $item = new ActivityDealerStaticticStatus();
                $item->setArray(
                    array
                    (
                        'dealer_id' => $user->getDealer()->getId(),
                        'activity_id' => $request->getParameter('activity'),
                        'ignore_q'.$curr_quarter.'_statistic' => $statistic && $statistic->getNotUsingImporter() ? false : !$to_importer,
                        'stat_type' => Activity::ACTIVITY_STATISTIC_TYPE_SIMPLE,
                        $quarter => $curr_quarter,
                        'year' => $year,
                        'complete' => true
                    )
                );
            } else {
                $item->setArray(
                    array
                    (
                        'ignore_q'.$curr_quarter.'_statistic' => $statistic && $statistic->getNotUsingImporter() ? false : !$to_importer,
                        $quarter => $curr_quarter,
                        'complete' => true,
                        'year' => $year
                    )
                );
            }

            $item->save();
        }

        //Если для активности разрешено отправлять нескольько раз данные на согласование, фиксируем дату последних изменений в данных
        if ($statistic && $statistic->getNotUsingImporter()) {
            $last_update_activity = new ActivityStatisticLastUpdates();
            $last_update_activity->setArray(
                array(
                    'activity_id' => $activity->getId(),
                    'statistic_id' => $statistic->getId(),
                    'dealer_id' => $user->getDealer()->getId(),
                    //'created_at' => date('Y-m-d H:i:s')
                )
            );
            $last_update_activity->save();
        }


        return $result;
    }

    public static function saveFieldData(sfWebRequest $request, $field_id, $field_value, $my_user) {
        $quarter = $my_user->getCurrentQuarter() != 0 ? $my_user->getCurrentQuarter() : D::getQuarter(D::calcQuarterData(date('d-m-Y')));
        $year = $my_user->getCurrentYear() != 0 ? $my_user->getCurrentYear() : D::getYear(D::calcQuarterData(date('d-m-Y')));

        $user = $my_user->getAuthUser();

        $field_data = ActivityFieldsValuesTable::getInstance()
            ->createQuery()
            ->where('field_id = ? and dealer_id = ? and q = ? AND year = ?', array($field_id, $user->getDealer()->getId(), $quarter, $year))
            ->fetchOne();

        $data_array = array();
        if (!$field_data) {
            $field_data = new ActivityFieldsValues();
        }


        $data_array['year'] = $year;
        $data_array['q'] = $quarter;

        //$data_array['field_id'] = $field_id;
        $data_array['val'] = $field_value;
        $data_array['dealer_id'] = $user->getDealer()->getId();
        //$data_array['user_id'] = $user->getId();

        $field_data->setArray($data_array);
        $field_data->save();

        return true;
    }

    public function usedInFormulas() {
        $formulas = array();
        $params = ActivityEfficiencyFormulaParamsTable::getInstance()->createQuery()
            ->where('(param1_type = ? or param2_type = ?) and (param1_value = ? or param2_value = ?)',
                array
                (
                    ActivityEfficiencyFormulaParams::FIELD_PARAM,
                    ActivityEfficiencyFormulaParams::FIELD_PARAM,
                    $this->getId(),
                    $this->getId()
                )
            )
            ->execute();

        foreach ($params as $param) {
            if (!array_key_exists($param->getFormulaId(), $formulas)) {
                $formulas[$param->getFormulaId()] = $param->getActivityEfficiencyFormulas();
            }
        }

        return $formulas;
    }
}
