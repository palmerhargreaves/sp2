<?php

/**
 * ActivityEfficiencyFormulas
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ActivityEfficiencyFormulas extends BaseActivityEfficiencyFormulas
{
    private $_calc_result = array();

    const EFFICIENCY_FORMULA = 'effectiveness';
    const REVENUE_FORMULA = 'revenue';
    const COST_FORMULA = 'costs';

    public function getParamsCalculateResult($dealer_id)
    {
        $params = ActivityEfficiencyFormulaParamsTable::getInstance()->createQuery()->where('formula_id = ?', $this->getId())->orderBy('id ASC')->limit(1)->fetchOne();
        foreach(array(ActivityEfficiencyFormulaParams::FIRST_PARAM, ActivityEfficiencyFormulaParams::SECOND_PARAM) as $param_index) {
            $this->_calc_result[$param_index] = $params ? $params->calculate($param_index, $dealer_id) : 0;
        }

        if ($this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM] == 0 || empty($this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM])) {
            return $this->_calc_result[ActivityEfficiencyFormulaParams::FIRST_PARAM];
        }

        $result = 0;
        if (is_array($this->_calc_result[ActivityEfficiencyFormulaParams::FIRST_PARAM]) && is_array($this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM]))
        {
            $values_index = 0;
            while(1) {
                if (isset($this->_calc_result[ActivityEfficiencyFormulaParams::FIRST_PARAM][$values_index]) && isset($this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM][$values_index])) {
                    $this->_calc_result[ActivityEfficiencyFormulaParams::FIRST_PARAM][$values_index]['val'] = $this->_calc_result[ActivityEfficiencyFormulaParams::FIRST_PARAM][$values_index]['val'] == 0 ? 1 : $this->_calc_result[ActivityEfficiencyFormulaParams::FIRST_PARAM][$values_index]['val'];
                    $this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM][$values_index]['val'] = $this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM][$values_index]['val'] == 0 ? 1 : $this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM][$values_index]['val'];

                    $result += floatval($this->_calc_result[ActivityEfficiencyFormulaParams::FIRST_PARAM][$values_index]['val']) * floatval($this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM][$values_index]['val']);
                } else {
                    break;
                }
                $values_index++;
            }

            return $result;
        }

        try {
            /*
             * Если значения полей должны суммироваться с разных кварталов, проходим по полученным результатам суммирования
             * Меняем в рез. наборе данных по индексу поля на полученный результат
             * */
            foreach ($this->_calc_result as $key => $value) {
                $result = 0;
                $from_key = 0;

                if (empty($value)) {
                    $this->_calc_result[$key] = 1;

                    continue;
                }

                if (is_array($value)) {
                    foreach ($value as $v_key => $value_data) {
                        $result += $value_data['val'];
                        $from_key = $key;
                    }

                    if ($from_key) {
                        $this->_calc_result[$from_key] = $result;
                    }
                }
            }

            return $this->{'params'.ucfirst($params->getParamsAction())}();
        } catch (Exception $ex)
        {
            return 0;
        }
    }

    private function paramsMult() {
        return $this->_calc_result[ActivityEfficiencyFormulaParams::FIRST_PARAM] * $this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM];
    }

    private function paramsMinus() {
        return $this->_calc_result[ActivityEfficiencyFormulaParams::FIRST_PARAM] - $this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM];
    }

    private function paramsPlus() {
        return $this->_calc_result[ActivityEfficiencyFormulaParams::FIRST_PARAM] + $this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM];
    }

    private function paramsDiv() {
        return round($this->_calc_result[ActivityEfficiencyFormulaParams::FIRST_PARAM] / ($this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM] != 0 ? $this->_calc_result[ActivityEfficiencyFormulaParams::SECOND_PARAM] : 1), 2);
    }

    public function isEfficiencyFormula() {
        return $this->getActivityEfficiencyWorkFormulas()->getType() == self::EFFICIENCY_FORMULA;
    }

    public function isRevenueFormula() {
        return $this->getActivityEfficiencyWorkFormulas()->getType() == self::REVENUE_FORMULA;
    }

    public function isCostFormula() {
        return $this->getActivityEfficiencyWorkFormulas()->getType() == self::COST_FORMULA;
    }
}
