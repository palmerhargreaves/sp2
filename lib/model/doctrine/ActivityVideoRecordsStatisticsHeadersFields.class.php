<?php

/**
 * ActivityVideoRecordsStatisticsHeadersFields
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ActivityVideoRecordsStatisticsHeadersFields extends BaseActivityVideoRecordsStatisticsHeadersFields
{
    const FIELD_TYPE_STRING = 'string';
    const FIELD_TYPE_NUMBER = 'number';
    const FIELD_TYPE_DATE = 'date';
    const FIELD_TYPE_BOOL = 'bool';
    const FIELD_TYPE_FILE = 'file';

    public function getFieldValue(User $user) {
        $dealer = $user->getDealer();

        return ActivityVideoRecordsStatisticsHeadersFieldsDataTable::getInstance()
            ->createQuery()
            ->where('field_id = ? and dealer_id = ?', array($this->getId(), $dealer->getId()))
            ->execute()
                ->getFirst();
    }

    public static function saveData(sfWebRequest $request, User $user) {
        foreach ($request->getParameter('data') as $key => $data) {
            $field_data = ActivityVideoRecordsStatisticsHeadersFieldsDataTable::getInstance()
                ->createQuery()
                ->where('field_id = ? and dealer_id = ?', array($data['id'], $user->getDealer()->getId()))
                ->fetchOne();

            $data_array = array();
            if (!$field_data) {
                $field_data = new ActivityVideoRecordsStatisticsHeadersFieldsData();

                $data_array['year'] = D::getYear(date('d-m-Y'));
                $data_array['quarter'] = D::getQuarter(date('d-m-Y'));
            }

            $data_array['field_id'] = $data['id'];
            $data_array['value'] = $data['value'];
            $data_array['dealer_id'] = $user->getDealer()->getId();
            $data_array['user_id'] = $user->getId();

            $field_data->setArray($data_array);
            $field_data->save();
        }

        return true;
    }

    public function getGroupName() {
        $group = ActivityVideoRecordsStatisticsHeadersGroupsTable::getInstance()->find($this->getGroupId());
        if ($group) {
            return $group->getHeader();
        }

        return 'Без группы';
    }
}
