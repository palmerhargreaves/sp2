<?php

/**
 * MainMenuItems
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class MainMenuItems extends BaseMainMenuItems
{
    const FILE_PATH = 'images/menu/';

    public function canAccess($dealer, $user) {
        $custom_code_access = $this->getCustomCodeAccess();

        $can_access = false;
        //Делаем проверку доступа для кастомного кода
        //Если есть разрешение на просмотр меню возвращаем истину в противном случае делаем доп. проверку
        if (!empty($custom_code_access)) {
            $can_access = eval($custom_code_access);
        }

        //Основные права доступа к меню
        $rules = $this->getRules();
        if (!empty($rules)) {
            $can_access = in_array($user->getGroup()->getId(), $rules);
        }

        //Права доступа по отделам
        //Если список отделов привязан к меню, делаем проверку на права доступа пользователя по группе, если доступ невозможен
        //делаем проверку на привязанный отдел к пользователю
        $departments = $this->getDepartments();
        if (!empty($departments) && $user->getDepartment()) {
            $can_access = in_array($user->getDepartment()->getUserDepartment()->getId(), $departments);
        }

        //Проверка на тип дилера
        //Если пользователь подключен к дилеру и роль пользователя Дилер
        //Делаем проверку на тип дилера (PKW, NFZ, PKF+NFZ)
        $dealer_types = $this->getDealerTypes();
        if (!empty($dealer_types) && $user->isRawDealer() && $user->isDealer() && $user->isDealerUser()) {
            $can_access = in_array($dealer->getDealerType(), $dealer_types);
        }

        return $can_access;
    }

    public function getMenuUrl($dealer, $user) {
        $custom_url = $this->getCustomCodeUrl();

        if (!empty($custom_url)) {
            $url = eval($custom_url);

            return !empty($url) ? $url : $this->getUrl();
        }

        return $this->getUrl();
    }

    public function getUsersRules($count =  true) {
        if (!$count) {
            $rules_result = MainMenuItemsRulesTable::getInstance()->createQuery()->where('menu_item_id = ? and users_rules != ?', array($this->getId(), ''))->fetchOne();
            if ($rules_result) {
                $rules = $rules_result->getUsersRules();
                $rules = explode(":", $rules);

                $rules = array_map(function ($item) {
                    $group = UserGroupTable::getInstance()->createQuery()->where('id = ?', $item)->fetchOne();

                    return $group->getName();
                }, $rules);

                return $rules;
            }

            return array();
        }

        return MainMenuItemsRulesTable::getInstance()->createQuery()->where('menu_item_id = ? and users_rules != ? ', array($this->getId(), ''))->count();
    }

    public function getUsersExtendedRules() {
        return array();
    }

    public function getDepartmentsRules($count = true) {
        if (!$count) {
            $departments_result = MainMenuItemsRulesTable::getInstance()->createQuery()->where('menu_item_id = ? and users_departments != ? ', array($this->getId(), ''))->fetchOne();
            if ($departments_result) {
                $departments = $departments_result->getUsersDepartments();
                $departments = explode(":", $departments);

                $departments = array_map(function ($item) {
                    $group = UsersDepartmentsTable::getInstance()->createQuery()->where('id = ?', $item)->fetchOne();

                    return $group->getName();
                }, $departments);

                return $departments;
            }

            return array();
        }

        return MainMenuItemsRulesTable::getInstance()->createQuery()->where('menu_item_id = ? and users_departments != ? ', array($this->getId(), ''))->count();
    }

    public function checkDealerTypeRule($dealerTypeId) {
        $menu_item_rule = MainMenuItemsRulesTable::getInstance()->createQuery()->where('menu_item_id = ?', $this->getId())->fetchOne();
        if ($menu_item_rule) {
            $dealer_types_rules = explode(":", $menu_item_rule->getDealersTypes());

            return in_array($dealerTypeId, $dealer_types_rules);
        }

        return false;
    }

    /**
     * Получить список правк доступа к меню
     * @return array
     */
    private function getRules() {
        $rules = array();

        $rules_result = MainMenuItemsRulesTable::getInstance()->createQuery()->where('menu_item_id = ? and users_rules != ?', array($this->getId(), ''))->fetchOne();
        if ($rules_result) {
            $rules = $rules_result->getUsersRules();
            $rules = explode(":", $rules);

            $rules = array_map(function ($item) {
                $group = UserGroupTable::getInstance()->createQuery()->where('id = ?', $item)->fetchOne();

                return $group->getId();
            }, $rules);

            return $rules;
        }

        return $rules;
    }

    /**
     * Получить список отделов привязанных к меню
     * @return array
     */
    private function getDepartments() {
        $departments = array();

        $departments_result = MainMenuItemsRulesTable::getInstance()->createQuery()->where('menu_item_id = ? and users_departments != ? ', array($this->getId(), ''))->fetchOne();
        if ($departments_result) {
            $departments = $departments_result->getUsersDepartments();
            $departments = explode(":", $departments);

            $departments = array_map(function ($item) {
                $group = UsersDepartmentsTable::getInstance()->createQuery()->where('id = ?', $item)->fetchOne();

                return $group->getId();
            }, $departments);

            return $departments;
        }

        return $departments;
    }

    /**
     * Проверка на возможность доступа определенного типа дилера к меню
     */
    private function getDealerTypes() {
        $types = array();

        $types_result = MainMenuItemsRulesTable::getInstance()->createQuery()->where('menu_item_id = ? and dealers_types != ? ', array($this->getId(), ''))->fetchOne();
        if ($types_result) {
            $dealers_types = $types_result->getDealersTypes();
            $dealers_types = explode(":", $dealers_types);

            return $dealers_types;
        }

        return $types;
    }
}
