<?php

/**
 * AgreementModel
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class AgreementModel extends BaseAgreementModel
{
    const CONCEPT_TYPE_ID = 10;

    const MODEL_FILE_PATH = 'activities/module/agreement/model_file';
    const AGREEMENT_COMMENTS_FILE_PATH = 'activities/module/agreement/agreement_comments_file';

    const CHILD_FILES_COUNT = 10;

    const SCENARIO_RECORD_STEP_FIRST = 'first';
    const SCENARIO_RECORD_STEP_SECOND = 'second';

    const UPLOADED_FILE_MODEL_TYPE = 'model';
    const UPLOADED_FILE_MODEL = 'model';

    const UPLOADED_FILE_REPORT = 'report';
    const UPLOADED_FILE_REPORT_TYPE = 'report';
    const UPLOADED_FILE_FINANCIAL_FILE_TYPE = 'report_financial';
    const UPLOADED_FILE_ADDITIONAL_FILE_TYPE = 'report_additional';
    const UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE = 'report_additional_ext';

    const UPLOADED_FILE_SCENARIO = 'model';
    const UPLOADED_FILE_SCENARIO_TYPE = 'model_scenario';

    const UPLOADED_FILE_RECORD = 'model';
    const UPLOADED_FILE_RECORD_TYPE = 'model_record';

    const BY_SCENARIO = 'scenario';
    const BY_RECORD = 'record';

    protected $loaded_values = null;
    protected $declines = null;

    private $_upload_activity_id = 0;

    private $_outOfDays = 0;
    private static $_logs = array();

    function setUp()
    {
        parent::setUp();

        $this->addListener(new UploadHelper('model_file', self::MODEL_FILE_PATH));
        $this->addListener(new UploadHelper('model_record_file', self::MODEL_FILE_PATH));

        $this->addListener(new UploadHelper('agreement_comments_file', self::AGREEMENT_COMMENTS_FILE_PATH));

    }


    /**
     * Sets values depending on an type of this agreement model.
     *
     * @param array $values
     * @throws UnknowModelTypeException
     */
    function setValuesByType($values)
    {
        $fields = null;
        if ($this->isValidModelCategory()) {
            $fields = $this->getModelCategory()->getFields();
        }

        $model_type = $this->getModelType();
        if (!$model_type) {
            throw new UnknowModelTypeException();
        }

        if (!$fields) {
            $fields = $model_type->getFields();
        }

        AgreementModelValueTable::getInstance()
            ->createQuery()
            ->delete()
            ->where('model_id=?', $this->getId())
            ->execute();

        foreach ($fields as $field) {
            $value = new AgreementModelValue();
            $value->setField($field);
            $value->setModel($this);
            $value->setValue(isset($values[$field->getIdentifier()]) ? $values[$field->getIdentifier()] : '');
            $value->save();
        }
    }

    public function isValidModelCategory()
    {
        return $this->getModelCategoryId() > 0 && !$this->getModelCategory()->getIsBlank();
    }

    function countWaitingSpecialists()
    {
        if ($this->getStatus() != 'wait_specialist')
            return 0;

        return AgreementModelCommentTable::getInstance()
            ->createQuery()
            ->where('model_id=? and status=?', array($this->getId(), 'wait'))
            ->count();
    }

    function countReportWaitingSpecialists()
    {
        return $this->getReport() ? $this->getReport()->countWaitingSpecialists() : 0;
    }

    function countDeclines()
    {
        if ($this->getStatus() != 'declined')
            return 0;

        if ($this->declines === null) {
            $this->declines = AgreementModelCommentTable::getInstance()
                ->createQuery()
                ->where('model_id=? and status=?', array($this->getId(), 'declined'))
                ->count();
        }
        return $this->declines;
    }

    function isOutOfDate($outDays = 0, $sendArray = false)
    {
        $today = D::toUnix(date('Y-m-d H:i:s'));
        if ($this->getAllowUseBlocked() == 1 && $this->getUseBlockedTo() != "") {
            $blockedDateTo = strtotime($this->getUseBlockedTo());

            // If time out in blocked model block again, else only return empty array to step up from checking
            if ($today > $blockedDateTo) {
                $this->setAllowUseBlocked(0);
                $this->setUseBlockedTo('');
                $this->save();

                return true;
            } else {
                return array();
            }
        }

        if ($this->getAllowUseBlocked() == 1) {
            return false;
        }


        $value = AgreementModelValueTable::getPeriodValueFromModel($this);
        if (empty($value) || is_array($value)) {
            return $sendArray ? array('status' => false) : false;
        }

        if ($outDays <= 0) {
            $outDays = sfConfig::get('app_model_block_days');
        }

        $value = $this->getNewDate($value, $outDays);

        $todayDate = D::toUnix(date('d-m-Y'));
        $todayDays = $this->getElapsedDays($todayDate);

        $lastModelUpdateDate = D::toUnix($value);
        $lastModelUpdateDays = $this->getElapsedDays(strtotime($value));

        $this->setOutOfDays($lastModelUpdateDays - $todayDays);
        if ($todayDate >= $lastModelUpdateDate) {
            return true;
        }

        return false;
    }

    public static function checkDateInCalendar($date)
    {
        return D::checkDateInCalendar($date);
    }

    public function getOutOfDays()
    {
        return $this->_outOfDays;
    }

    public function setOutOfDays($days)
    {
        $this->_outOfDays = $days;
    }

    function getElapsedDays($st)
    {
        return floor(($st / 3600) / 24);
    }

    function isConcept()
    {
        return $this->getModelType() ? $this->getModelType()->getConcept() : false;
    }

    public function isCompleted()
    {
        return $this->getStatus() == 'accepted' && $this->getReport() && $this->getReport()->getStatus() == 'accepted';
    }

    public function showCheckDateToStatusLabel()
    {
        if ($this->getStatus() == 'not_sent' || $this->getStatus() == 'declined') {
            return false;
        }

        if ($this->getReport() && $this->getReport()->getStatus() != "accepted" && $this->getReport()->getStatus() != 'declined' && $this->getReport()->getStatus() != 'not_sent') {
            return true;
        }

        if ($this->isModelScenario()) {
            if ($this->getCssStatus() != 'ok' && $this->getStep1() != 'accepted' || $this->getStep2() != 'accepted') {
                return true;
            }

            return false;
        }

        return $this->getCssStatus() != 'ok' ? true : false;
    }

    function getCssStatus()
    {
        if ($this->getStatus() == 'accepted')
            return 'ok';

        if ($this->isModelScenario() && $this->getStep1() != "none") {
            if (($this->getStatus() == "wait" || $this->getStatus() == 'wait_specialist' || $this->getStatus() == 'wait_manager_specialist') && ($this->getStep2() == "none" || $this->getStep2() == "wait")) {
                return 'clock';
            } else if ($this->getStep1() == 'accepted' && $this->getStep2() == "accepted") {
                return 'ok';
            } else if ($this->getStatus() != "declined" && $this->getStep1() != 'accepted' && $this->getStep2() != "accepted" || $this->getStatus() == "wait_specialist") {
                return 'clock';
            } else {
                return 'pencil';
            }
        }

        switch ($this->getStatus()) {
            case 'wait':
            case 'wait_specialist':
            case 'wait_manager_specialist':
                return 'clock';
            case 'not_sent':
            case 'declined':
                return 'pencil';
        }

        return 'none';
    }

    function getReportCssStatus()
    {
        $status = $this->getReport() ? $this->getReport()->getStatus() : 'not_sent';

        if (is_null($status)) {
            return 'none';
        }

        switch ($status) {
            case 'wait':
            case 'wait_specialist':
            case 'wait_manager_specialist':
                return 'clock';
            case 'accepted':
                return 'ok';
            case 'declined':
                return 'pencil';
        }

        if ((!$status || $status == 'not_sent') && $this->getStatus() == 'accepted')
            return 'pencil';

        return 'none';
    }

    function getDealerActionText()
    {
        $status = $this->getStatus();

        if ($this->getIsBlocked() && !$this->getAllowUseBlocked()) {
            return 'Заблокирована';
        }

        if ($status == 'accepted') {
            $report_status = $this->getReport() ? $this->getReport()->getStatus() : false;

            if (!$report_status)
                return 'Загрузите отчёт';

            if ($report_status == 'not_sent')
                return 'Отправьте отчёт на согласование';

            if ($report_status == 'wait')
                return 'Дождитесь согласования отчёта';

            if ($report_status == 'wait_specialist')
                return 'Дождитесь согласования отчёта специалистами';

            if ($report_status == 'declined')
                return 'Внесите исправления в отчёт';
        }

        if ($status == 'not_sent') {
            return $this->isConcept() ? 'Отправьте концепцию на согласование' : 'Отправьте макет на согласование';
        }

        if ($status == 'wait' || $status == 'wait_specialist' || $status == 'wait_manager_specialist') {
            return $this->isConcept() ? 'Дождитесь согласования концепции' : 'Дождитесь согласования макета';
        }

        if ($status == 'declined') {
            return $this->isConcept() ? 'Внесите исправление в концепцию' : 'Внесите исправления в макет';
        }

        return '';
    }

    function getManagerActionText($isDealer = false)
    {
        //Заблокированная заявка
        if ($this->getIsBlocked() && !$this->getAllowUseBlocked()) {
            return 'Заблокирована';
        }

        $status = $this->getStatus();
        if ($this->isConcept() && $this->getActivity()->getAllowSpecialAgreement()) {
            $status = $this->getStatus() == 'accepted' ? $this->getStatus() :
                ($this->getStatus() == 'declined' ? 'declined' : SpecialAgreementConceptStatuses::getStatus($this->getId()));
        }

        if ($status == 'wait' || $status == 'wait_manager_specialist') {
            return $this->isConcept() ? 'Согласуйте концепцию' : 'Согласуйте макет';
        }

        if ($status == 'declined') {
            return $this->isConcept() ? 'Ожидайте правок концепции' : ($isDealer ? 'Ожидаются правки макета' : 'Ожидайте правок макета');
        }

        if ($status == 'accepted') {
            $report_status = $this->getReport() ? $this->getReport()->getStatus() : null;

            if (!$report_status)
                return $isDealer ? 'Ожидается отчет' : 'Ожидайте отправки на согласование';

            if ($report_status == 'not_sent')
                return $isDealer ? 'Ожидается отчет' : 'Ожидайте отправки на согласование';

            if ($report_status == 'wait')
                return 'Согласуйте отчёт';

            if ($report_status == 'declined')
                return 'Ожидайте правок отчёта';
        }

        return '';
    }

    function getSpecialistActionText($isDealer = false)
    {
        $status = $this->getStatus();

        if ($this->isConcept() && $this->getActivity()->getAllowSpecialAgreement()) {
            $status = SpecialAgreementConceptStatuses::getStatus($this->getId());
        }

        if ($status == 'wait_specialist' || $status == 'wait_manager_specialist') {
            return $this->isConcept() ? 'Согласуйте концепцию' : 'Согласуйте макет';
        }

        if ($status == 'accepted') {
            $report_status = $this->getReport() ? $this->getReport()->getStatus() : false;

            if (!$report_status) {
                return $this->isConcept() ? 'Ожидайте концепцию' : ($isDealer ? 'Ожидается отчет' : 'Ожидайте отчёт');
            }

            if ($report_status == 'wait_specialist') {
                return $this->isConcept() ? 'Согласуйте концепцию' : 'Согласуйте отчёт';
            }
        }

        return '';
    }

    function getModelAcceptToDateFromLog($use_date_as_object = true)
    {
        $days = $this->getStatus() == "accepted" ? $this->getModelReportCategoryAgreementDays() : $this->getModelCategoryAgreementDays(); //Количество дней для выполнения заявки

        $data = Utils::getModelDateFromLogEntryWithYear($this->getId(), $use_date_as_object, array('sent_to_specialist', 'edit'));
        if ($data && $use_date_as_object) {
            return $this->getNewDate($data->getCreatedAt(), $days);
        }

        return $this->getNewDate($data, $days);
    }

    /**
     * @param null $calcDate
     * @return bool|string
     */
    function getModelReportAcceptToDate($calcDate = null)
    {
        $date = $calcDate;
        if (is_null($date)) {
            $data = Utils::getModelDateFromLogEntryWithYear($this->getId(), true, array('sent_to_specialist', 'edit'));
            if ($data) {
                $date = $data->getCreatedAt();
            }
        }

        return $this->getNewDate($date ? $date : $this->getReport()->getUpdatedAt(), $this->getModelReportCategoryAgreementDays());
    }

    /**
     * @param $date
     * @param int $plusDays
     * @return false|string
     */
    function getNewDate($date, $plusDays = 1)
    {
        for ($i = 0; $i <= $plusDays; $i++) {
            $tempDate = date("d-m-Y H:i:s", strtotime('+' . $i . ' days', D::toUnix($date)));
            $d = getdate(strtotime($tempDate));

            //Проверка даты на праздничный день установленный в календаре
            $dPlus = $this->checkDateInCalendar($tempDate);

            //Если в календаре нет данных, делаем проверку на выходные
            if ($dPlus == 0) {
                if ($d['wday'] == 0 || $d['wday'] == 6) {
                    $dPlus++;
                }
            } else {
                //Если данные есть в календаре, добавляем количество праздничных дней
                $i += ($dPlus - 1);
            }

            $plusDays += $dPlus;
        }

        return date("H:i:s d-m-Y", strtotime('+' . $plusDays . ' days', D::toUnix($date)));
    }

    function getModelAcceptToDate($isDealer = false, $use_date_as_object = true)
    {
        if (!$isDealer) {
            return $this->getModelAcceptToDateFromLog($use_date_as_object);
        } else if ($this->getStatus() == "accepted" && $this->getReport() && $this->getReport()->getStatus() != "accepted") {
            return $this->getModelReportAcceptToDate();
        }

        return $this->getDateModelAccept();
    }

    function checkModelAcceptToDateForUserDealerType()
    {
        if ($this->getStatus() == "accepted" && $this->getReport() && $this->getReport()->getStatus() != "accepted") {
            return $this->getModelReportAcceptToDate();
        }

        return $this->getDateModelAccept();
    }

    function getDateModelAccept($days = 10)
    {
        $value = '';
        if ($this->isValidModelCategory()) {
            $value = $this->getPeriod();
        } else {
            $values = $this->getValues();
            foreach ($values as $v) {
                if (in_array($v->getFieldId(), array(31, 30, 29, 4, 7, 11, 15, 19, 25))) {
                    $value = $v->getValue();
                }
            }
        }

        if (empty($value)) {
            return $this->getModelAcceptToDateFromLog();
        } else {
            $value = explode('-', $value);
            if (!empty($value[1])) {
                $value = explode('.', $value[1]);
                $value = sprintf('%s:%s:%s %s-%s-20%s',
                    date('h', strtotime($this->getCreatedAt())),
                    date('m', strtotime($this->getCreatedAt())),
                    date('s', strtotime($this->getCreatedAt())),
                    $value[0], $value[1], $value[2]);
            } else
                $value = $this->getCreatedAt();
        }

        return $this->getNewDate($value, $days);
    }

    /**
     * @param bool $isDealer
     * @param bool $specialReport
     * @param null $calcDate
     * @return bool
     */
    function isModelAcceptActiveToday($isDealer = false, $specialReport = false, $calcDate = null)
    {
        if ($this->getStatus() == "accepted" && $this->getReport() && $this->getReport()->getStatus() != "accepted") {
            return $this->getModelReportAcceptActive($specialReport, $calcDate);
        } else if ($this->getStatus() == "accepted") {
            return false;
        }

        return $this->getModelAcceptActive($isDealer);
    }

    /**
     * @param bool $specialReport
     * @param null $calcDate
     * @return bool
     */
    function getModelReportAcceptActive($specialReport = false, $calcDate = null)
    {
        if ($specialReport) {
            return $this->compareAcceptDate($this->getDateModelAccept());
        }

        $date = $this->getModelReportAcceptToDate($calcDate);
        if (empty($date)) {
            return false;
        }

        return $this->compareAcceptDate($date);
    }

    function getModelAcceptActive($isDealer = false)
    {
        /*if(($this->getModelType()->getId() == 2 || $this->getModelType()->getId() == 4) && $this->getStep1() != "none") {
          return false;
        }*/

        $date = $this->getModelAcceptToDate($isDealer);
        if (empty($date)) {
            return false;
        }

        return $this->compareAcceptDate($date);
    }

    function compareAcceptDate($date_from_date)
    {
        $time_compare_date_model = strtotime($date_from_date);
        $time_compare_today = strtotime(date('H:i:s d-m-Y'));

        $date = getdate($time_compare_date_model);
        $today = getdate($time_compare_today);

        if ($date['mday'] == $today['mday'] && $date['month'] == $today['month'] && $date['year'] == $today['year']) {
            return true;
        } else if ($time_compare_date_model < $time_compare_today) {
            return true;
        }

        return false;
    }

    function getValueByType($name)
    {
        $this->loadValuesByTypeIf();

        return isset($this->loaded_values[$name]) ? $this->loaded_values[$name] : '';
    }

    function getValuesByType()
    {
        $this->loadValuesByTypeIf();

        return $this->loaded_values;
    }

    /**
     * Returns specialist comment
     *
     * @param User $user
     * @return AgreementModelComment|false
     */
    function getSpecialistComment(User $user)
    {
        return AgreementModelCommentTable::getInstance()
            ->createQuery()
            ->where('model_id=? and user_id=?', array($this->getId(), $user->getId()))
            ->fetchOne();
    }

    protected function loadValuesByTypeIf()
    {
        if ($this->loaded_values === null)
            $this->loadByTypeValues();
    }

    protected function loadByTypeValues()
    {
        if ($this->getModelCategoryId() != 0 && !$this->getModelCategory()->getIsBlank()) {
            $values = AgreementModelValueTable::getInstance()
                ->createQuery('v')
                ->innerJoin('v.Field f')
                ->where('model_id=? and parent_category_id=?', array($this->getId(), $this->getModelCategoryId()))
                ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        } else {
            $values = AgreementModelValueTable::getInstance()
                ->createQuery('v')
                ->innerJoin('v.Field f')
                ->where('model_id=? and model_type_id=?', array($this->getId(), $this->getModelTypeId()))
                ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        }

        $this->loaded_values = array();
        foreach ($values as $value) {
            $this->loaded_values[$value['Field']['identifier']] = $value['value'];
        }
    }

    function cancelSpecialistSending()
    {
        AgreementModelCommentTable::getInstance()
            ->createQuery()
            ->delete()
            ->where('model_id=?', $this->getId())
            ->execute();
    }

    /**
     * Creates a log entry copies for specialists commenting this model
     *
     * @param LogEntry $entry
     * @return array an array of copies
     */
    function createPrivateLogEntryForSpecialists(LogEntry $entry)
    {
        $copies1 = $this->createPrivateLogEntryForSpecialistsByModel($entry);

        $skip_users = array();
        foreach ($copies1 as $copy)
            $skip_users[] = $copy->getPrivateUserId();

        $copies2 = $this->createPrivateLogEntryForSpecialistsByReport($entry, $skip_users);

        return array_merge($copies1, $copies2);
    }

    protected function createPrivateLogEntryForSpecialistsByModel(LogEntry $entry)
    {
        return $this->createPrivateLogEntryForSpecialistsByComments($entry, $this->getComments());
    }

    protected function createPrivateLogEntryForSpecialistsByReport(LogEntry $entry, $skip_users)
    {
        $report = $this->getReport();

        return $report
            ? $this->createPrivateLogEntryForSpecialistsByComments($entry, $report->getComments(), $skip_users)
            : array();
    }

    protected function createPrivateLogEntryForSpecialistsByComments(LogEntry $entry, Doctrine_Collection $comments, $skip_users = array())
    {
        $copies = array();

        foreach ($comments as $comment) {
            if (!in_array($comment->getUserId(), $skip_users))
                $copies[] = $entry->createPrivateCopy($comment->getUser());
        }

        return $copies;
    }

    /**
     * Returns a file name helper for model
     *
     * @return FileNameHelper
     */
    function getModelFileNameHelper()
    {
        return new FileNameHelper(sfConfig::get('sf_upload_dir') . '/' . self::MODEL_FILE_PATH . '/' . $this->getModelFile());
    }

    function getModelRecordFileNameHelper()
    {
        return new FileNameHelper(sfConfig::get('sf_upload_dir') . '/' . self::MODEL_FILE_PATH . '/' . $this->getModelRecordFile());
    }

    function getModelFileNameHelperByFileName($name)
    {
        return new FileNameHelper(sfConfig::get('sf_upload_dir') . '/' . self::MODEL_FILE_PATH . '/' . $name);
    }

    /**
     * Returns a file name helper for a comments file
     *
     * @return FileNameHelper
     */
    function getAgreementCommentsFileNameHelper()
    {
        return new FileNameHelper(sfConfig::get('sf_upload_dir') . '/' . self::AGREEMENT_COMMENTS_FILE_PATH . '/' . $this->getAgreementCommentsFile());
    }

    function preSave($event)
    {
        if (!$this->getDiscussionId()) {
            $discussion = new Discussion();
            $discussion->save();

            $this->setDiscussionId($discussion->getId());
        }

        if ($this->getStatus() == 'wait' || $this->getStatus() == 'wait_manager_specialist') {
            $this->setWait(true);
        } else if ($this->getReport() && $this->getReport()->getStatus() == 'wait') {
            $this->setWait(true);
        } else {
            $this->setWait(false);
        }

        if ($this->getStatus() == 'wait_specialist' || $this->getStatus() == 'wait_manager_specialist') {
            $this->setWaitSpecialist(true);
        } else if ($this->getReport() && ($this->getReport()->getStatus() == 'wait_specialist' || $this->getReport()->getStatus() == 'wait_manager_specialist')) {
            $this->setWaitSpecialist(true);
        } else {
            $this->setWaitSpecialist(false);
        }

        if ($this->getModelCategoryId() == 0) {
            $this->setModelCategoryId(AgreementModelCategoriesTable::blankCategory()->getId());
        }
    }

    function preDelete($event)
    {
        $discussion = $this->getDiscussion();
        if ($discussion && !$discussion->isNew())
            $discussion->delete();

        RealBudgetTable::getInstance()->removeByObjectOnly(ActivityModule::byIdentifier('agreement'), $this->getId());
    }

    function updateActivityTaskResult($activity, Dealer $dealer)
    {
        $tasks = $activity->getTasks();

        foreach ($tasks as $task) {
            if (($task->getId() == $this->getTaskId()) && $this->getCssStatus() != "ok") {
                $task->updateReportStatus($dealer, 1);
            }
        }
    }

    static function getBlockedModels()
    {
        return AgreementModelTable::getInstance()
            ->createQuery('m')
            ->where('year(m.created_at) = ? and is_blocked = ? and m.blocked_inform != ? and m.status = ?', array(date('Y'), false, 2, 'accepted'))
            ->orderBy('m.id DESC')
            ->execute();
    }

    public
    function getConcept()
    {
        return AgreementModelTable::getInstance()->find($this->getConceptId());
    }

    public
    function addDeclineFile($file)
    {
        $item = new AgreementModelAcceptDeclineFiles();

        $item->setModelId($this->getId());
        $item->setFileName($file);
        $item->setFileType('decline');

        $item->save();
    }

    public
    function addAcceptFile($file)
    {
        $item = new AgreementModelAcceptDeclineFiles();

        $item->setModelId($this->getId());
        $item->setFileName($file);
        $item->setFileType('accept');

        $item->save();
    }

    public
    function workWithScenatioAndRecordsData(sfWebRequest $request)
    {
        $step = strtolower(trim($request->getParameter('step')));

        if ($this->isModelScenario()) {
            if ($step === self::SCENARIO_RECORD_STEP_FIRST) {
                /*$this->setModelRecordFile('');
                for ($i = 1; $i <= self::CHILD_FILES_COUNT; $i++) {
                    $func = "setModelRecordFile" . $i;
                    $this->$func('');
                }*/
                $this->setStep1("none");
                $this->setStep2("none");

            } else if ($step === self::SCENARIO_RECORD_STEP_SECOND) {
                /*$this->setModelRecordFile('');
                for ($i = 1; $i <= self::CHILD_FILES_COUNT; $i++) {
                    $func = "setModelRecordFile" . $i;
                    $this->$func('');
                }*/
                $this->setStep2("none");
            } else {
                $this->setStep1("none");
                $this->setStep2("none");

                $this->setNoModelChanges(false);
            }
        }
    }

    public function getCalcDate()
    {
        $date = null;
        if ($this->getStatus() == "accepted" && $this->getReport() && $this->getReport()->getStatus() == "accepted") {
            $date = Utils::getModelDateFromLogEntryWithYear($this->getId());
        }

        return !is_null($date) ? D::calcQuarterData($date) : D::calcQuarterData($this->getCreatedAt());
    }


    public
    function workWithScenarioAndRadio()
    {
        if ($this->isModelScenario()) {
            if ($this->getStep1() != "accepted") {
                $this->setStatus('not_sent');

                $this->setStep1("accepted");
                $this->setStep2("wait");
            } else if ($this->getStep2() != "accepted") {
                $this->setStep2("accepted");
                $this->setStatus('accepted');
            }

            $this->save();
        }
    }

    /**
     * Accept model if manager / designer statuses accepted
     */
    public
    function acceptModelWithMD($clear = false)
    {
        if ($this->getManagerStatus() != 'wait') {

            if ($this->getManagerStatus() == 'accepted' && $this->getDesignerStatus() == 'accepted') {
                if ($this->isModelScenario()) {
                    if ($this->getStep1() == 'accepted' && $this->getStep2() == 'accepted') {
                        $this->setStatus('accepted');
                    }
                } else {
                    $this->setStatus('accepted');
                }
            } else if ($this->getManagerStatus() == 'declined' || $this->getDesignerStatus() == 'declined') {
                $this->setStatus('declined');

                if ($this->isModelScenario()) {
                    if ($this->getStep1() == "accepted" && $this->getStep2() != "accepted") {
                        $this->setStep1('declined');
                        $this->setStep2('declined');
                    } else {
                        $this->setStep2('declined');
                    }
                }
            }
        } else if (!$this->isModelScenario()) {
            $this->setStatus('accepted');
        }

        if ($clear) {
            $this->setManagerStatus('wait');
            $this->setDesignerStatus('wait');
        }
    }

    public
    function changeStep1Statuses($change_status = true)
    {
        if ($change_status) {
            $this->setStatus('not_sent');
        }

        $this->setStep1("accepted");
        $this->setStep2("wait");
    }

    public
    function isModelScenario($changed_model_type_id = null)
    {
        $model_type_id = $this->getModelTypeId();
        if (!is_null($changed_model_type_id)) {
            $model_type_id = $changed_model_type_id;
        }

        $model_type = AgreementModelTypeTable::getInstance()->find($model_type_id);
        if ($model_type) {
            return $model_type->getAgreementType() == AgreementModelType::SIMPLE_TYPE ? false : true;
        }

        return false;
    }

    function calcLeftDaysToUploadReport()
    {
        if (($this->getStatus() == 'accepted' && $this->getReport() && $this->getReport()->getStatus() == 'accepted')
            || ($this->getStatus() == 'wait' || $this->getStatus() == 'wait_specialist' || $this->getStatus() == 'not_sent')
        ) {
            return 999;
        }

        if ($this->getStatus() == 'accepted' && $this->getReport() && ($this->getReport()->getStatus() == 'wait' || $this->getReport()->getStatus() == 'wait_specialist')) {
            return 999;
        }

        $model_period_end = AgreementModelValueTable::getPeriodValueFromModel($this);
        $model_period_end = strtotime($this->getNewDate($model_period_end, 10));
        $today = strtotime(date('d-m-Y H:i:s'));

        $elapsed_days = Utils::getElapsedTime($today - $model_period_end);
        if ($today > $model_period_end) {

            if ($this->getReport() && $this->getReport()->getStatus() == 'declined' && $elapsed_days >= 0) {
                $log_entry = LogEntryTable::getInstance()->createQuery()->select('created_at')->where('object_id = ? and action = ? and object_type = ?', array($this->getId(), 'declined', 'agreement_report'))->orderBy('id DESC')->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
                if ($log_entry) {
                    $value = date('d-m-Y', strtotime($log_entry['created_at']));
                    $model_period_end = D::getNewDate($value, 2);
                }

                $model_period_end = strtotime($model_period_end);
            }

            if ($today > $model_period_end) {
                return -1;
            }

            return 2;
        }

        return abs($elapsed_days);
    }

    public
    function isModelCompleted()
    {
        return $this->getStatus() == 'accepted' && $this->getReport() && $this->getReport()->getStatus() == 'accepted';
    }

    public
    function isModelBlocked()
    {
        return $this->getIsBlocked() && !$this->getAllowUseBlocked() ? true : false;
    }

    public
    function isModelScenarioCompleted()
    {
        return $this->getStep1() == 'accepted' ? true : false;
    }

    public
    function isModelRecordCompleted()
    {
        return $this->getStep2() == 'accepted' ? true : false;
    }

    /**
     *
     * @return array
     */
    public function getBlockedInformState()
    {
        $item = AgreementModelsBlockInformTable::getInstance()->createQuery()->where('model_id = ?', $this->getId())->limit(1)->orderBy('id DESC')->fetchOne();
        if ($item) {
            return array('block_type' => $item->getBlockType(), 'left_days' => $item->getLeftDays(), 'period_end' => $item->getPeriodEnd(), 'date' => $item->getCreatedAt());
        }

        //return $this->getBlockedInformStatus();
        return null;
    }

    /**
     * Calc model correct quarter by checking model status
     * @param null $by_date
     * @param null $by_created_date
     * @return float
     */
    public function getModelQuarterDate($by_date = null, $by_created_date = null)
    {
        $model_quarter_date = D::calcQuarterData(time());

        if ($this->isModelBlocked()) {
            if ($this->getStatus() == "accepted") {
                $date = $query = LogEntryTable::getInstance()
                    ->createQuery()
                    ->select('created_at, object_id')
                    ->andWhere('private_user_id = ? and action = ? and object_type = ?', array(0, 'sent_to_specialist', 'agreement_model'))
                    ->andWhere('object_id = ?', $this->getId())
                    ->orderBy('id DESC')
                    ->limit(1)
                    ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

                if ($date) {
                    return date('Y-m-d H:i:s', D::calcQuarterData($date['created_at']));
                }
            }

            return D::calcQuarterData($this->getCreatedAt());
        }

        //Если концерция и проврка по дате создание (или по дате согласование)
        if ($this->isConcept() && $by_created_date) {
            $model_log_data = Utils::getModelDateFromLogEntryWithYear($this->getId(), true);
            if ($model_log_data) {
                return D::calcQuarterData($model_log_data->getCreatedAt());
            }
        }

        if (!is_null($by_date)) {
            return $by_date;
        }

        if ($this->isModelCompleted() || ($this->getStatus() == 'accepted' && $this->getReport() && $this->getReport()->getStatus() == 'wait')) {
            $model_quarter_date = Utils::getModelDateFromLogEntryWithYear($this->getId());
        }

        return $model_quarter_date;
    }

    /**
     * Delete all model / report files by file types
     */
    public function removeUploadedFiles()
    {
        $files_types = array
        (
            AgreementModel::UPLOADED_FILE_MODEL_TYPE => AgreementModel::MODEL_FILE_PATH,
            AgreementModel::UPLOADED_FILE_RECORD_TYPE => AgreementModel::MODEL_FILE_PATH,
            AgreementModel::UPLOADED_FILE_SCENARIO_TYPE => AgreementModel::MODEL_FILE_PATH,
            AgreementModel::UPLOADED_FILE_ADDITIONAL_FILE_TYPE => AgreementModelReport::ADDITIONAL_FILE_PATH,
            AgreementModel::UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE => AgreementModelReport::ADDITIONAL_FILE_PATH,
            AgreementModel::UPLOADED_FILE_FINANCIAL_FILE_TYPE => AgreementModelReport::FINANCIAL_DOCS_FILE_PATH
        );

        foreach ($files_types as $key => $path) {
            $filesList = AgreementModelReportFilesTable::getInstance()->createQuery()->where('object_id = ? and file_type = ?', array($this->getId(), $key))->execute();

            foreach ($filesList as $file) {
                $filePath = sfConfig::get('app_uploads_path') . '/' . $path . '/' . $file->getFile();

                if (file_exists($filePath)) {
                    unlink($filePath);
                }

                $file->delete();
            }
        }
    }

    public function getFinancialDocsFile()
    {
        return AgreementModelReportFilesTable::getInstance()->createQuery()->where('object_id = ? and file_type = ?', array($this->getId(), self::UPLOADED_FILE_FINANCIAL_FILE_TYPE))->fetchOne();
    }

    public function getUploadedFilesCount($model_type_id = null)
    {
        if ($this->isModelScenario($model_type_id)) {
            return array
            (
                self::BY_SCENARIO => $this->getModelUploadedScenarioRecordFiles(self::BY_SCENARIO, true),
                self::BY_RECORD => $this->getModelUploadedScenarioRecordFiles(self::BY_RECORD, true)
            );
        }

        return array(self::UPLOADED_FILE_MODEL => AgreementModelReportFilesTable::getUploadedFilesListBy($this->getId(), self::UPLOADED_FILE_MODEL, self::UPLOADED_FILE_MODEL_TYPE, true));
    }

    /**
     * Get uploaded files count by type and status
     * @return mixed
     */
    public function getUploadedFilesCountByCurrentStatus()
    {
        $result = $this->getUploadedFilesCount();
        if ($this->isModelScenario()) {
            if ($this->getStep1() == 'accepted') {
                return $result[self::BY_RECORD];
            }

            return $result[self::BY_SCENARIO];
        }

        return $result[self::UPLOADED_FILE_MODEL];
    }

    public function getReportUploadedFilesCount()
    {
        return array
        (
            self::UPLOADED_FILE_FINANCIAL_FILE_TYPE => AgreementModelReportFilesTable::getUploadedFilesListBy($this->getId(), self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_FINANCIAL_FILE_TYPE, true),
            self::UPLOADED_FILE_ADDITIONAL_FILE_TYPE => AgreementModelReportFilesTable::getUploadedFilesListBy($this->getId(), self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_ADDITIONAL_FILE_TYPE, true),
            self::UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE => AgreementModelReportFilesTable::getUploadedFilesListBy($this->getId(), self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE, true)
        );
    }

    /**
     * @param $by_type
     * @return array
     */
    public function makeListOfUploadedFilesByType($by_type)
    {
        $uploaded_files_list = $this->getModelUploadedFiles($by_type);

        $result_files = array();
        foreach ($uploaded_files_list as $uploaded_file) {
            $file_path = $filePath = sfConfig::get('app_uploads_path') . '/' . self::MODEL_FILE_PATH . '/' . $uploaded_file->getFileName();

            $result_files[] = array
            (
                'id' => $uploaded_file->getId(),
                'name' => $uploaded_file->getFile(),
                'size' => filesize($file_path),
                'path' => F::isImage($uploaded_file->getFile()) ? '/uploads/' . self::MODEL_FILE_PATH . '/' . $uploaded_file->getFile() : '',
            );
        }

        return $result_files;
    }

    /**
     * @param null $by_type
     * @param null $model_type_id
     * @param bool $as_array
     * @return mixed
     */
    public function getModelUploadedFiles($by_type = null, $model_type_id = null, $as_array = false)
    {
        if ($this->isModelScenario($model_type_id) && !is_null($by_type)) {
            return $this->getModelUploadedScenarioRecordFiles($by_type, false, $as_array);
        }

        return AgreementModelReportFilesTable::getUploadedFilesListBy($this->getId(), self::UPLOADED_FILE_MODEL, self::UPLOADED_FILE_MODEL_TYPE, false, $as_array, $this->getUploadActivityId());
    }

    /**
     * @param $by_type
     * @param bool $count
     * @param bool $as_array
     * @return mixed
     */
    public function getModelUploadedScenarioRecordFiles($by_type, $count = false, $as_array = false)
    {
        if ($by_type == self::BY_SCENARIO) {
            return AgreementModelReportFilesTable::getUploadedFilesListBy($this->getId(), self::UPLOADED_FILE_SCENARIO, self::UPLOADED_FILE_SCENARIO_TYPE, $count, $as_array, $this->getUploadActivityId());
        } else if ($by_type == self::BY_RECORD) {
            return AgreementModelReportFilesTable::getUploadedFilesListBy($this->getId(), self::UPLOADED_FILE_RECORD, self::UPLOADED_FILE_RECORD_TYPE, $count, $as_array, $this->getUploadActivityId());
        }
    }

    public function getFinancialDocsFiles()
    {
        return AgreementModelReportFilesTable::getUploadedFilesListBy($this->getId(), self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_FINANCIAL_FILE_TYPE);
    }

    public function getAdditionalFiles()
    {
        return AgreementModelReportFilesTable::getUploadedFilesListBy($this->getId(), self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_ADDITIONAL_FILE_TYPE);
    }

    public
    function getAdditionalExtFiles()
    {
        return AgreementModelReportFilesTable::getUploadedFilesListBy($this->getId(), self::UPLOADED_FILE_REPORT, self::UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE);
    }

    public
    function getUploadedFileByTypeIdx($type, $idx)
    {
        $fields_types = array
        (
            AgreementModel::UPLOADED_FILE_ADDITIONAL_EXT_FILE_TYPE => 'additional_file_ext_',
            AgreementModel::UPLOADED_FILE_ADDITIONAL_FILE_TYPE => 'additional_file_'
        );

        if (array_key_exists($type, $fields_types)) {
            return AgreementModelReportFilesTable::getInstance()
                ->createQuery()
                ->where('file_type = ? and object_id = ? and field_name = ?',
                    array
                    (
                        $type,
                        $this->getId(),
                        sprintf('%s%s', $fields_types[$type], $idx)
                    )
                )
                ->fetchOne();
        }

        return null;
    }

    /**
     * Accept model if manager / designer statuses accepted
     */
    public function acceptModelByManagerDesigner($status = '')
    {
        if ($this->getManagerStatus() != 'wait') {
            if ($this->getManagerStatus() == 'accepted' && $this->getDesignerStatus() == 'accepted') {
                if ($this->isModelScenario()) {
                    if ($this->getStep1() == 'accepted' && $this->getStep2() == 'accepted') {
                        $this->setStatus('accepted');
                    }
                } else {
                    $this->setStatus('accepted');
                }
            } else if ($this->getManagerStatus() == 'declined' || $this->getDesignerStatus() == 'declined') {
                $this->setStatus($status);

                if ($this->isModelScenario()) {
                    if ($this->getStep1() == "accepted" && $this->getStep2() != "accepted") {
                        $this->setStep1('declined');
                        $this->setStep2('declined');
                    } else {
                        $this->setStep2('declined');
                    }
                }
            }
        } else if (!$this->isModelScenario()) {
            $this->setStatus($status);
        }
    }

    public function getModelHeader($model_type)
    {
        if ($this->isModelScenario()) {
            return $model_type == self::UPLOADED_FILE_SCENARIO_TYPE && $this->getModelType()->getId() == 4
                ? "Сценарий видеоролика"
                : "Сценарий радиоролика";
        }

        return $this->isConcept() ? 'Концепция' : 'Макет';
    }

    public function getUploadedFilesSchemaByType()
    {
        $show_main_block = false;

        if ($this->getStatus() == 'wait' || $this->getStatus() == 'wait_specialist' || $this->getStatus() == 'wait_manager_specialist' || $this->getStatus() == 'accepted') {
            $show_main_block = true;
        }

        if ($this->isModelScenario()) {
            $show_record_block = false;

            //Для загруженных файлов - сценариев
            if ($this->getStep1() == 'accepted') {
                $show_main_block = true;
            }

            //Для загруженных файлов - записей
            if (($this->getStep1() == 'accepted' || $this->getNoModelChanges()) && ($this->getStatus() == 'wait' || $this->getStatus() == 'wait_manager_specialist' || $this->getStatus() == 'wait_specialist' || $this->getStatus() == 'accepted')) {
                $show_record_block = true;
            }

            $label_scenario = $this->getModelType()->getId() == 4 ? 'Сценарий видеоролика' : 'Сценарий радиоролика';
            $label_record = $this->getModelType()->getId() == 4 ? 'Запись видеоролика' : 'Запись радиоролика';

            //If model has category and agreement type by scenario / record get labels
            if ($this->isValidModelCategory() && $this->isModelScenario()) {
                $field_description = $this->getModelType()->getFieldDescription();
                $field_description = explode(";", $field_description);

                if (!empty($field_description)) {
                    $label_scenario = $field_description[0];
                    $label_record = $field_description[1];
                }
            }

            return array
            (
                self::UPLOADED_FILE_SCENARIO_TYPE => array
                (
                    'type' => self::UPLOADED_FILE_SCENARIO,
                    'file_type' => self::UPLOADED_FILE_SCENARIO_TYPE,
                    'show' => $show_main_block,
                    'label' => $label_scenario
                ),
                self::UPLOADED_FILE_RECORD_TYPE => array
                (
                    'type' => self::UPLOADED_FILE_RECORD,
                    'show' => $show_record_block,
                    'file_type' => self::UPLOADED_FILE_RECORD_TYPE,
                    'label' => $label_record
                )
            );
        }

        return array(self::UPLOADED_FILE_MODEL_TYPE => array('type' => self::UPLOADED_FILE_MODEL, 'show' => $show_main_block, 'label' => $this->isConcept() ? 'Концепция' : 'Макет'));
    }

    /**
     * Set to none status for model discussion messages
     * @return null
     */
    public function nullDiscussionMessagesStatuses()
    {
        $messages = MessageTable::getInstance()->createQuery()->where('discussion_id = ?', $this->getDiscussionId())->andWhere('msg_status != ?', 'none')->execute();

        foreach ($messages as $msg) {
            $msg->setMsgStatus('none');
            $msg->save();
        }
    }

    /**
     * Get model total places count for report, when upload additional files
     * @return int
     */
    public function getModelTypePlacesCount()
    {
        $places_count = 0;

        $values_list = AgreementModelValueTable::getInstance()->createQuery('am_v')
            ->where('model_id = ?', $this->getId())
            ->execute();

        foreach ($values_list as $value_item) {
            $value = $value_item->getValue();
            if ($value_item->getField()->getHide() && !empty($value)) {
                $places_count++;
            }
        }

        return $places_count != 0 ? ++$places_count : 0;
    }

    /**
     * Get model work status
     * @return array
     */
    public function workStatusBlocked($days = 0) {
        return array('img' => '_thumb_55228.png', 'label' => 'Заявка заблокирована', 'text' => 'Заблокирована');
    }

    public function workStatusLeft10($days = 0) {
        return array
        (
            'img' => $days <= 1 ? '_thumb_55228.png' : '_thumb_55227.png',
            'label' => 'Заявка скоро будет заблокирована',
            'text' => $days != -1 ? sprintf('До блокировки %s д%s', $days, NumbersHelper::numberEnd($days, array('ень', 'ня', 'ней'))) : 'До блокировки 10 дней'
        );
    }

    public function workStatusLeft2($days = 0) {
        return array
        (
            'img' => $days <= 1 ? '_thumb_55228.png' : '_thumb_55226.png',
            'label' => 'Заявка скоро будет заблокирована',
            'text' => $days != -1 ? sprintf('До блокировки %s д%s', $days, NumbersHelper::numberEnd($days, array('ень', 'ня', 'ней'))) : 'До блокировки 2 дня'
        );
    }

    public function workStatus() {
        //Get information about model blocked status
        $block_inform = $this->getBlockedInformState();

        //Если заявка раблокирована
        if ($this->getIsBlocked() && $this->getAllowUseBlocked()) {
            return array(
                'img' => '_thumb_55226.png',
                'label' => 'Заявка скоро будет заблокирована',
                'text' => 'До блокировки 2 дня'
            );
        }

        $days = 0;
        if (is_array($block_inform)) {
            $block_inform_status = $block_inform['block_type'];

            //Если последнее событие, блокирока заявки, делаем проверку на блокировку заявки, если заблокирована то учитываем это
            //Если нет, то значит заявка была разблокирована
            if ($block_inform_status == DealersModelsInformLeftDays::MODEL_BLOCKED) {
                $block_inform_status = $this->isModelBlocked() ? $block_inform_status : '';
            } else {

                //Calculate left days
                if (isset($block_inform['date'])) {
                    $plus_days = $block_inform_status == DealersModelsInformLeftDays::MODEL_2_DAYS_LEFT_LABEL ? 2 :
                        ($block_inform_status == DealersModelsInformLeftDays::MODEL_10_DAYS_LEFT_LABEL ? 10 : 0);

                    //Если заявка не заблокирована, получаем количество дней до блокировки
                    if ($plus_days > 0) {
                        $days_left_date = !empty($block_inform['period_end']) ? $block_inform['period_end'] : D::getNewDate($block_inform['date'], $plus_days, '+');
                        $today = date('Y-m-d H:i:s');

                        //Делаем проверку на выходные дни
                        $not_work_days = 0;
                        $days = Utils::getElapsedTime(strtotime($days_left_date) - strtotime($today));
                        for($day_index = 0; $day_index <= $days; $day_index++) {
                            $tempDate = date('Y-m-d H:i:s', strtotime('-' . $day_index . ' days', D::toUnix($days_left_date)));

                            $d = getdate(strtotime($tempDate));
                            $dPlus = self::checkDateInCalendar($tempDate);
                            if ($dPlus == 0) {
                                if ($d['wday'] == 0 || $d['wday'] == 6)
                                    $not_work_days++;
                            } else if ($dPlus > 1) {
                                $day_index += $dPlus;
                            }
                        }

                        //Вычитаем полученные рабочие дни
                        $days -= $not_work_days;
                    }

                    if ($days < 0) {
                        $days = 1;
                    }
                }
            }
        } else {
            $block_inform_status = $block_inform;
        }


        if (is_null($block_inform_status) && $this->isModelBlocked()) {
            $block_inform_status = 'blocked';
        }

        if (!empty($block_inform_status)) {
            $method = implode('', array_map(function($item) {
                return ucfirst($item);
            },explode('_', $block_inform_status)));

            $method = 'workStatus'.$method;
            if (method_exists($this, $method)) {
                return $this->$method($days);
            }
        }

        return null;
    }

    public function setUploadActivityId($activity_id) {
        $this->_upload_activity_id = $activity_id;
    }

    public function getUploadActivityId() {
        return $this->_upload_activity_id;
    }

    /**
     * Получить количество дней для согласования заявок
     * @return int
     */
    public function getModelCategoryAgreementDays() {
        $model_category = $this->getModelCategory();
        if ($model_category && !$model_category->getIsBlank()) {
            return $model_category->getDaysToAgreement();
        }

        return 1;
    }

    /**
     * Получить количество дней для согласование отчетов
     * @return int
     */
    public function getModelReportCategoryAgreementDays() {
        $model_category = $this->getModelCategory();
        if ($model_category && !$model_category->getIsBlank()) {
            return $model_category->getDaysToAgreementReport();
        }

        return 3;
    }

    /**
     * Получить превью заявки
     * Перебираем все загруженные файлы, выбираем только изображения
     */
    public function getPreviewImage() {
        $uploaded_files = AgreementModelReportFilesTable::getInstance()->createQuery()->select('file, path')->where('object_id = ?', $this->getId())->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        $path = self::MODEL_FILE_PATH;
        $uploaded_files = array_filter(array_map(function($item) use($path) {
            return Utils::isImage($item['file']) ? sprintf('/uploads/%s%s/%s', $path, $item['path'], $item['file']) : null;
        }, $uploaded_files));

        if (!empty($uploaded_files)) {
            return $uploaded_files;
        }

        return null;
    }

    /**
     * @param $user
     * @param $activity_id
     * @return string *
     */
    public function getConceptTargetStatisticStatusText($user, $activity_id) {
        $dealer = $user->getDealerUsers()->getFirst();
        if (!$dealer) {
            return $this->getId();
        }

        $title_text = array();

        $information_block = ActivityDealerInformationBlocksTable::getInstance()->createQuery()->where('activity_id = ? and dealer_id = ? and concept_id = ?', array($activity_id, $dealer->getDealerId(), $this->getId()))->fetchOne();
        if ($information_block) {
            $title_text[] = 'T';
        }

        return sprintf('%s %d', count($title_text) ? '['.implode(', ', $title_text).']' : '', $this->getId());
    }
}


