<?php

/**
 * ActivityEfficiencyFormulaParams
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ActivityEfficiencyFormulaParams extends BaseActivityEfficiencyFormulaParams
{
    const FIRST_PARAM = 1;
    const SECOND_PARAM = 2;

    const FIELD_PARAM = 'field_id';
    const CUSTOM_FUNCTION = 'custom_function';
    const FORMULA_RESULT = 'formula_result';

    private $_params_action_symbol = array('mult' => '*', 'plus' => '+', 'minus' => '-', 'div' => '/');

    public function getParamsLabels() {
        if ($this->getParam2Value()) {
            return sprintf('%s %s %s', $this->getParamName(self::FIRST_PARAM), $this->getParamsActionSymbol(), $this->getParamName(self::SECOND_PARAM));
        }

        return $this->getParamName(self::FIRST_PARAM);
    }

    /**
     * @param $param_index
     * @return mixed
     */
    public function getParamName($param_index) {
        $param_type = $this->getParamTypeByIndex($param_index);

        $cls = 'Activity'.$param_type.'Param';
        $param = new $cls($this, $param_index);

        return $param->getName();
    }

    /**
     * @param $param_index
     * @param $dealer_id
     * @return mixed
     */
    public function calculate($param_index, $dealer_id) {
        $param_type = $this->getParamTypeByIndex($param_index);

        $cls = 'Activity'.$param_type.'Param';
        $param = new $cls($this, $param_index, $dealer_id);

        return $param->calculate();
    }

    /**
     * @param $param_index
     * @return string
     */
    private function getParamTypeByIndex($param_index) {
        $param_type_func = 'getParam'.$param_index.'Type';

        $type = explode('_', $this->$param_type_func());
        $type = array_map(function($type) {
            return ucfirst($type);
        }, $type);

        return implode('', $type);
    }

    public function getParamsActionSymbol() {
        return $this->_params_action_symbol[$this->getParamsAction()];
    }
}
