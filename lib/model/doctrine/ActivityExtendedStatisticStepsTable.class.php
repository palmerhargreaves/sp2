<?php

/**
 * ActivityExtendedStatisticStepsTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ActivityExtendedStatisticStepsTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ActivityExtendedStatisticStepsTable
     */
    public static function getInstance ()
    {
        return Doctrine_Core::getTable('ActivityExtendedStatisticSteps');
    }

    public static function checkDealerMustCompleteStatistics ( $user )
    {
        $activities = ActivityTable::getInstance()->createQuery()->where('allow_extended_statistic = ? and finished = ?', array( true, false ))->orderBy('position ASC')->execute();
        $today = time();

        $result = array();

        if ($user->getDealerUsers()->count()) {
            $dealer = $user->getDealerUsers()->getFirst()->getDealer();
            foreach ($activities as $activity) {
                $concepts = AgreementModelTable::getInstance()->createQuery()->where('activity_id = ? and dealer_id = ? and model_type_id = ?',
                    array( $activity->getId(), $dealer->getId(), AgreementModel::CONCEPT_TYPE_ID ))->orderBy('id DESC')->execute();

                //Проверяем на наличие у активности привязанных шагов
                if (ActivityExtendedStatisticStepsTable::getInstance()->createQuery()->where('activity_id = ?', $activity->getId())->count() == 0) {
                    continue;
                }

                //Проходим по списку полученных концепций для получение списка кварталов по активности и дилеру
                foreach ($concepts as $concept) {
                    $quartersModels = new ActivityQuartersModelsAndStatistics($user, $activity);
                    $quarters_list = $quartersModels->getData();

                    $quarter_and_year = array();
                    foreach ($quarters_list as $year_key => $quarter_data) {
                        foreach ($quarter_data as $q_key => $q_item) {
                            $quarter_and_year[ $year_key ][] = $q_key;
                        }
                    }

                    //Проверка на завршение мероприятия
                    $concept_date_item = AgreementModelDatesTable::getInstance()->createQuery()->where('model_id = ?', $concept->getId())->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
                    $concept_settings = AgreementModelSettingsTable::getInstance()->createQuery()->where('model_id = ?', $concept->getId())->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

                    //Заполняем данными для расслки писем
                    foreach ($quarter_and_year as $year_key => $q_keys) {
                        foreach ($q_keys as $q_key) {
                            //Проверка на заполнении даннами статистики
                            $is_completed_statistic = ActivityDealerStaticticStatusTable::getInstance()->createQuery()
                                    ->where('dealer_id = ? and activity_id = ? and q' . $q_key . ' = ? and ignore_q' . $q_key . '_statistic = ? and complete = ?',
                                        array(
                                            $dealer->getId(),
                                            $activity->getId(),
                                            $q_key,
                                            //$concept->getId(),
                                            0,
                                            true
                                        ))->count() > 0;

                            if (!$is_completed_statistic) {

                                if ($concept_date_item) {
                                    $concept_date = explode("/", $concept_date_item[ 'date_of' ]);
                                    $concept_date = strtotime(date("Y-m-d", strtotime(array_pop($concept_date) . ' +3 days')));

                                    //Делаем проверку на заполнение шага, так как нет возможности получить конкретный шаг по активности, делаем выборку с учетом корректной сортировки
                                    //Первый шаг первый в выборке, второй шаг последний
                                    $step_completed = self::getStepStatus($activity->getId(), $dealer->getId(), $concept->getId(), $year_key, $q_key, 'ASC');

                                    if ($concept_date < $today && !$step_completed) {
                                        //$mails_to_send[ $year_key ][ $q_key ][$concept->getId()]['mail_action_end'] = array('concept' => $concept->getId());
                                        //$mails_to_send[ $year_key ][$concept->getId()]['mail_action_end'] = array('concept' => $concept->getId(), 'q' => $q_key);
                                        $result[ $concept->getId() ][ $activity->getId() ][ 1 ] = array( 'status' => false, 'year' => $year_key, 'q' => $q_key, 'activity' => $activity->getId(), 'step' => 1, 'concept_id' => $concept->getId() );
                                    }
                                }

                                //Проверка на завершение сертификата
                                if ($concept_settings) {
                                    $concept_date = strtotime(date("Y-m-d", strtotime($concept_settings[ 'certificate_date_to' ] . ' +10 days')));

                                    //Делаем проверку на заполнение шага, так как нет возможности получить конкретный шаг по активности, делаем выборку с учетом корректной сортировки
                                    //Первый шаг первый в выборке, второй шаг последний
                                    $step_completed = self::getStepStatus($activity->getId(), $dealer->getId(), $concept->getId(), $year_key, $q_key, 'DESC');

                                    if ($concept_date < $today && !$step_completed) {
                                        //$mails_to_send[ $year_key ][ $q_key ][$concept->getId()]['mail_certificate_end'] = array('concept' => $concept->getId());
                                        //$mails_to_send[ $year_key ] [$concept->getId()]['mail_certificate_end'] = array('concept' => $concept->getId(), 'q' => $q_key);
                                        $result[ $concept->getId() ][ $activity->getId() ][ 2 ] = array( 'status' => false, 'year' => $year_key, 'q' => $q_key, 'activity' => $activity->getId(), 'step' => 2, 'concept_id' => $concept->getId() );
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return $result;
    }

    /**
     * @param $activity_id
     * @param $dealer_id
     * @param $concept_id
     * @param $year_key
     * @param $q_key
     * @param $order
     * @return bool
     */
    private static function getStepStatus ( $activity_id, $dealer_id, $concept_id, $year_key, $q_key, $order )
    {
        $step_completed = false;

        $step = ActivityExtendedStatisticStepsTable::getInstance()->createQuery()->where('activity_id = ?', $activity_id)->orderby('position ' . $order)->fetchOne();
        if ($step) {
            $step_status = ActivityExtendedStatisticStepStatusTable::getInstance()->createQuery()
                ->where('step_id = ? and activity_id = ? and dealer_id = ? and concept_id = ? and year = ? and quarter = ?',
                    array(
                        $step->getId(),
                        $activity_id,
                        $dealer_id,
                        $concept_id,
                        $year_key,
                        $q_key
                    ))->fetchOne();

            if ($step_status && $step_status->getStatus()) {
                $step_completed = true;
            }
        }

        return $step_completed;
    }
}