<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ActivityStatisticPreCheck', 'doctrine');

/**
 * BaseActivityStatisticPreCheck
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $activity_id
 * @property integer $statistic_id
 * @property integer $dealer_id
 * @property integer $user_who_check
 * @property integer $quarter
 * @property integer $year
 * @property boolean $is_checked
 * 
 * @method integer                   getId()             Returns the current record's "id" value
 * @method integer                   getActivityId()     Returns the current record's "activity_id" value
 * @method integer                   getStatisticId()    Returns the current record's "statistic_id" value
 * @method integer                   getDealerId()       Returns the current record's "dealer_id" value
 * @method integer                   getUserWhoCheck()   Returns the current record's "user_who_check" value
 * @method integer                   getQuarter()        Returns the current record's "quarter" value
 * @method integer                   getYear()           Returns the current record's "year" value
 * @method boolean                   getIsChecked()      Returns the current record's "is_checked" value
 * @method ActivityStatisticPreCheck setId()             Sets the current record's "id" value
 * @method ActivityStatisticPreCheck setActivityId()     Sets the current record's "activity_id" value
 * @method ActivityStatisticPreCheck setStatisticId()    Sets the current record's "statistic_id" value
 * @method ActivityStatisticPreCheck setDealerId()       Sets the current record's "dealer_id" value
 * @method ActivityStatisticPreCheck setUserWhoCheck()   Sets the current record's "user_who_check" value
 * @method ActivityStatisticPreCheck setQuarter()        Sets the current record's "quarter" value
 * @method ActivityStatisticPreCheck setYear()           Sets the current record's "year" value
 * @method ActivityStatisticPreCheck setIsChecked()      Sets the current record's "is_checked" value
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseActivityStatisticPreCheck extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('activity_statistic_pre_check');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('activity_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'notnull' => true,
             ));
        $this->hasColumn('statistic_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'notnull' => true,
             ));
        $this->hasColumn('dealer_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'notnull' => true,
             ));
        $this->hasColumn('user_who_check', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'notnull' => true,
             ));
        $this->hasColumn('quarter', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'notnull' => true,
             ));
        $this->hasColumn('year', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'notnull' => true,
             ));
        $this->hasColumn('is_checked', 'integer', 1, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}