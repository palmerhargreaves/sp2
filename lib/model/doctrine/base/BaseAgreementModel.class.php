<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('AgreementModel', 'doctrine');

/**
 * BaseAgreementModel
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $id
 * @property integer $activity_id
 * @property integer $dealer_id
 * @property string $name
 * @property integer $model_type_id
 * @property string $target
 * @property decimal $cost
 * @property string $agreement_comments
 * @property string $agreement_comments_file
 * @property integer $decline_reason_id
 * @property string $model_file
 * @property enum $status
 * @property integer $report_id
 * @property integer $discussion_id
 * @property integer $blank_id
 * @property boolean $wait
 * @property boolean $wait_specialist
 * @property Doctrine_Collection $Values
 * @property Activity $Activity
 * @property AgreementModelBlank $Blank
 * @property Dealer $Dealer
 * @property AgreementModelType $ModelType
 * @property AgreementDeclineReason $DeclineReason
 * @property Discussion $Discussion
 * @property AgreementModelReport $Report
 * @property Doctrine_Collection $Comments
 * @property AgreementModelReport $AgreementModelReport
 *
 * @method integer                getId()                      Returns the current record's "id" value
 * @method integer                getActivityId()              Returns the current record's "activity_id" value
 * @method integer                getDealerId()                Returns the current record's "dealer_id" value
 * @method string                 getName()                    Returns the current record's "name" value
 * @method integer                getModelTypeId()             Returns the current record's "model_type_id" value
 * @method string                 getTarget()                  Returns the current record's "target" value
 * @method decimal                getCost()                    Returns the current record's "cost" value
 * @method string                 getAgreementComments()       Returns the current record's "agreement_comments" value
 * @method string                 getAgreementCommentsFile()   Returns the current record's "agreement_comments_file" value
 * @method integer                getDeclineReasonId()         Returns the current record's "decline_reason_id" value
 * @method string                 getModelFile()               Returns the current record's "model_file" value
 * @method enum                   getStatus()                  Returns the current record's "status" value
 * @method integer                getReportId()                Returns the current record's "report_id" value
 * @method integer                getDiscussionId()            Returns the current record's "discussion_id" value
 * @method integer                getBlankId()                 Returns the current record's "blank_id" value
 * @method boolean                getWait()                    Returns the current record's "wait" value
 * @method boolean                getWaitSpecialist()          Returns the current record's "wait_specialist" value
 * @method Doctrine_Collection    getValues()                  Returns the current record's "Values" collection
 * @method Activity               getActivity()                Returns the current record's "Activity" value
 * @method AgreementModelBlank    getBlank()                   Returns the current record's "Blank" value
 * @method Dealer                 getDealer()                  Returns the current record's "Dealer" value
 * @method AgreementModelType     getModelType()               Returns the current record's "ModelType" value
 * @method AgreementDeclineReason getDeclineReason()           Returns the current record's "DeclineReason" value
 * @method Discussion             getDiscussion()              Returns the current record's "Discussion" value
 * @method AgreementModelReport   getReport()                  Returns the current record's "Report" value
 * @method Doctrine_Collection    getComments()                Returns the current record's "Comments" collection
 * @method AgreementModelReport   getAgreementModelReport()    Returns the current record's "AgreementModelReport" value
 * @method AgreementModel         setId()                      Sets the current record's "id" value
 * @method AgreementModel         setActivityId()              Sets the current record's "activity_id" value
 * @method AgreementModel         setDealerId()                Sets the current record's "dealer_id" value
 * @method AgreementModel         setName()                    Sets the current record's "name" value
 * @method AgreementModel         setModelTypeId()             Sets the current record's "model_type_id" value
 * @method AgreementModel         setTarget()                  Sets the current record's "target" value
 * @method AgreementModel         setCost()                    Sets the current record's "cost" value
 * @method AgreementModel         setAgreementComments()       Sets the current record's "agreement_comments" value
 * @method AgreementModel         setAgreementCommentsFile()   Sets the current record's "agreement_comments_file" value
 * @method AgreementModel         setDeclineReasonId()         Sets the current record's "decline_reason_id" value
 * @method AgreementModel         setModelFile()               Sets the current record's "model_file" value
 * @method AgreementModel         setStatus()                  Sets the current record's "status" value
 * @method AgreementModel         setReportId()                Sets the current record's "report_id" value
 * @method AgreementModel         setDiscussionId()            Sets the current record's "discussion_id" value
 * @method AgreementModel         setBlankId()                 Sets the current record's "blank_id" value
 * @method AgreementModel         setWait()                    Sets the current record's "wait" value
 * @method AgreementModel         setWaitSpecialist()          Sets the current record's "wait_specialist" value
 * @method AgreementModel         setValues()                  Sets the current record's "Values" collection
 * @method AgreementModel         setActivity()                Sets the current record's "Activity" value
 * @method AgreementModel         setBlank()                   Sets the current record's "Blank" value
 * @method AgreementModel         setDealer()                  Sets the current record's "Dealer" value
 * @method AgreementModel         setModelType()               Sets the current record's "ModelType" value
 * @method AgreementModel         setDeclineReason()           Sets the current record's "DeclineReason" value
 * @method AgreementModel         setDiscussion()              Sets the current record's "Discussion" value
 * @method AgreementModel         setReport()                  Sets the current record's "Report" value
 * @method AgreementModel         setComments()                Sets the current record's "Comments" collection
 * @method AgreementModel         setAgreementModelReport()    Sets the current record's "AgreementModelReport" value
 *
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAgreementModel extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('agreement_model');
        $this->hasColumn('id', 'integer', null, array(
            'type' => 'integer',
            'primary' => true,
            'autoincrement' => true,
        ));
        $this->hasColumn('activity_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => true,
        ));
        $this->hasColumn('dealer_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => true,
        ));
        $this->hasColumn('name', 'string', 255, array(
            'type' => 'string',
            'notnull' => true,
            'length' => 255,
        ));
        $this->hasColumn('model_type_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => true,
        ));
        $this->hasColumn('original_model_type_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => true,
        ));
        $this->hasColumn('model_category_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => false,
        ));
        $this->hasColumn('target', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));
        $this->hasColumn('cost', 'decimal', null, array(
            'type' => 'decimal',
            'scale' => 2,
            'notnull' => true,
            'default' => 0,
        ));
        $this->hasColumn('period', 'string', 255, array(
            'type' => 'string',
            'notnull' => true,
            'length' => 255,
        ));
        $this->hasColumn('agreement_comments', 'clob', null, array(
            'type' => 'clob',
            'notnull' => false,
        ));
        $this->hasColumn('agreement_comments_file', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));
        $this->hasColumn('decline_reason_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => false,
        ));
        $this->hasColumn('model_file', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));
        $this->hasColumn('status', 'enum', null, array(
            'type' => 'enum',
            'values' =>
                array(
                    0 => 'wait',
                    1 => 'wait_specialist',
                    2 => 'accepted',
                    3 => 'declined',
                    4 => 'not_sent',
                    5 => 'wait_manager_specialist'
                ),
            'notnull' => true,
        ));
        $this->hasColumn('report_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => false,
        ));
        $this->hasColumn('discussion_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => false,
        ));
        $this->hasColumn('blank_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => false,
        ));
        $this->hasColumn('wait', 'boolean', null, array(
            'type' => 'boolean',
            'default' => false,
            'notnull' => true,
        ));
        $this->hasColumn('wait_specialist', 'boolean', null, array(
            'type' => 'boolean',
            'default' => false,
            'notnull' => true,
        ));
        $this->hasColumn('task_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => true,
            'default' => 0,
        ));

        $this->hasColumn('accept_in_model', 'integer', null, array(
            'type' => 'integer',
            'notnull' => true,
            'default' => 0,
        ));

        $this->hasColumn('is_blocked', 'boolean', null, array(
            'type' => 'boolean',
            'notnull' => true,
            'default' => false,
        ));

        $this->hasColumn('allow_use_blocked', 'integer', null, array(
            'type' => 'integer',
            'notnull' => true,
            'default' => 0,
        ));

        $this->hasColumn('use_blocked_to', 'string', 30, array(
            'type' => 'string',
            'notnull' => true,
            'length' => 30,
        ));

        $this->hasColumn('blocked_inform', 'integer', null, array(
            'type' => 'integer',
            'notnull' => true,
            'default' => 0,
        ));

        $this->hasColumn('no_model_changes', 'boolean', null, array(
            'type' => 'boolean',
            'notnull' => true,
            'default' => false,
        ));

        $this->hasColumn('no_model_changes_view', 'boolean', null, array(
            'type' => 'boolean',
            'notnull' => true,
            'default' => false,
        ));

        $this->hasColumn('model_accepted_in_online_redactor', 'boolean', null, array(
            'type' => 'boolean',
            'notnull' => true,
            'default' => false,
        ));

        $this->hasColumn('step1', 'enum', null, array(
            'type' => 'enum',
            'values' =>
                array(
                    0 => 'none',
                    1 => 'accepted',
                    2 => 'declined',
                    3 => 'wait',
                ),
            'notnull' => true,
        ));

        $this->hasColumn('step2', 'enum', null, array(
            'type' => 'enum',
            'values' =>
                array(
                    0 => 'none',
                    1 => 'accepted',
                    2 => 'declined',
                    3 => 'wait',
                ),
            'notnull' => true,
        ));

        $this->hasColumn('model_record_file', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_record_file1', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_record_file2', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_record_file3', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_record_file4', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_record_file5', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_record_file6', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_record_file7', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_record_file8', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_record_file9', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_record_file10', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_file1', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_file2', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_file3', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_file4', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_file5', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_file6', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_file7', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_file8', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_file9', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('model_file10', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));
        $this->hasColumn('editor_link', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));
        $this->hasColumn('concept_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => false,
        ));
        $this->hasColumn('share_name', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('manager_status', 'enum', null, array(
            'type' => 'enum',
            'values' =>
                array(
                    0 => 'wait',
                    1 => 'accepted',
                    2 => 'declined',
                    3 => 'not_sent',
                ),
            'notnull' => true,
        ));
        $this->hasColumn('designer_status', 'enum', null, array(
            'type' => 'enum',
            'values' =>
                array(
                    0 => 'wait',
                    1 => 'accepted',
                    2 => 'declined',
                    3 => 'not_sent',
                ),
            'notnull' => true,
        ));

        $this->hasColumn('designer_approve', 'boolean', null, array(
            'type' => 'boolean',
            'notnull' => true,
            'default' => false,
        ));

        $this->hasColumn('agreement_comment_manager', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('is_necessarily_model', 'integer', 11, array(
            'type' => 'integer',
            'notnull' => false,
            'length' => 11,
            'default' => 0
        ));

        $this->hasColumn('blocked_inform_status', 'enum', null, array(
            'type' => 'enum',
            'values' =>
                array(
                    0 => 'left_10',
                    1 => 'left_2',
                    2 => 'blocked',
                ),
            'notnull' => false,
        ));

        $this->hasColumn('user_agent', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('files_ids', 'string', 255, array(
            'type' => 'string',
            'notnull' => false,
            'length' => 255,
        ));

        $this->hasColumn('is_deleted', 'boolean', null, array(
            'type' => 'boolean',
            'notnull' => true,
            'default' => false,
        ));

        $this->hasColumn('special_agreement', 'boolean', null, array(
            'type' => 'boolean',
            'notnull' => true,
            'default' => false,
        ));

        $this->hasColumn('agreement_by_importer', 'boolean', null, array(
            'type' => 'boolean',
            'notnull' => true,
            'default' => false,
        ));

        $this->index('status', array(
            'fields' =>
                array(
                    0 => 'status',
                ),
        ));
        $this->index('name', array(
            'fields' =>
                array(
                    0 => 'name',
                ),
        ));
        $this->index('cost', array(
            'fields' =>
                array(
                    0 => 'cost',
                ),
        ));
        $this->index('wait', array(
            'fields' =>
                array(
                    0 => 'wait',
                ),
        ));
        $this->index('wait_specialist', array(
            'fields' =>
                array(
                    0 => 'wait_specialist',
                ),
        ));
        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('AgreementModelValue as Values', array(
            'local' => 'id',
            'foreign' => 'model_id',
            'cascade' => array(
                0 => 'delete',
            )));

        $this->hasOne('Activity', array(
            'local' => 'activity_id',
            'foreign' => 'id'));

        $this->hasOne('AgreementModelBlank as Blank', array(
            'local' => 'blank_id',
            'foreign' => 'id'));

        $this->hasOne('Dealer', array(
            'local' => 'dealer_id',
            'foreign' => 'id'));

        $this->hasOne('AgreementModelType as ModelType', array(
            'local' => 'model_type_id',
            'foreign' => 'id'));

        $this->hasOne('AgreementModelType as OriginalModelType', array(
            'local' => 'original_model_type_id',
            'foreign' => 'id'));

        $this->hasOne('AgreementModelCategories as ModelCategory', array(
            'local' => 'model_category_id',
            'foreign' => 'id'));

        $this->hasOne('AgreementDeclineReason as DeclineReason', array(
            'local' => 'decline_reason_id',
            'foreign' => 'id'));

        $this->hasOne('Discussion', array(
            'local' => 'discussion_id',
            'foreign' => 'id'));

        $this->hasOne('AgreementModelReport as Report', array(
            'local' => 'report_id',
            'foreign' => 'id',
            'cascade' => array(
                0 => 'delete',
            )));

        $this->hasMany('AgreementModelComment as Comments', array(
            'local' => 'id',
            'foreign' => 'model_id',
            'cascade' => array(
                0 => 'delete',
            )));

        $this->hasOne('AgreementModelReport', array(
            'local' => 'id',
            'foreign' => 'model_id'));

        $this->hasOne('AgreementModelSettings', array(
            'local' => 'id',
            'foreign' => 'model_id'));

        $this->hasMany('AgreementModelDates', array(
            'local' => 'id',
            'foreign' => 'model_id',
            'cascade' => array(
                0 => 'delete'
            )));

        $this->hasMany('AgreementModelAcceptDeclineFiles as ModelFiles', array(
            'local' => 'id',
            'foreign' => 'model_id'));

        $this->hasMany('AgreementModelReportFiles as ModelReportFiles', array(
            'local' => 'id',
            'foreign' => 'object_id',
            'cascade' => array(
                0 => 'delete',
            )));

        $this->hasMany('LogEntry', array(
            'local' => 'id',
            'foreign' => 'object_id'
        ));

        $this->hasOne('AgreementModel as Concept', array(
            'local' => 'concept_id',
            'foreign' => 'id'
        ));

        $this->hasMany("SpecialAgreementConceptStatuses", array(
            'local' => 'id',
            'foreign' => 'concept_id'
        ));

        $this->hasMany('AgreementModelImporter', array(
            'local' => 'id',
            'foreign' => 'model_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}
