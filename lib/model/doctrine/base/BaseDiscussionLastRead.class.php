<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('DiscussionLastRead', 'doctrine');

/**
 * BaseDiscussionLastRead
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $message_id
 * @property integer $user_id
 * @property Message $Message
 * @property User $User
 * 
 * @method integer            getId()         Returns the current record's "id" value
 * @method integer            getMessageId()  Returns the current record's "message_id" value
 * @method integer            getUserId()     Returns the current record's "user_id" value
 * @method Message            getMessage()    Returns the current record's "Message" value
 * @method User               getUser()       Returns the current record's "User" value
 * @method DiscussionLastRead setId()         Sets the current record's "id" value
 * @method DiscussionLastRead setMessageId()  Sets the current record's "message_id" value
 * @method DiscussionLastRead setUserId()     Sets the current record's "user_id" value
 * @method DiscussionLastRead setMessage()    Sets the current record's "Message" value
 * @method DiscussionLastRead setUser()       Sets the current record's "User" value
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDiscussionLastRead extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('discussion_last_read');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('message_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Message', array(
             'local' => 'message_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));
    }
}