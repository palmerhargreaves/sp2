<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Message', 'doctrine');

/**
 * BaseMessage
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $id
 * @property integer $discussion_id
 * @property integer $user_id
 * @property integer $private_user_id
 * @property string $user_name
 * @property clob $text
 * @property boolean $system
 * @property User $User
 * @property User $PrivateUser
 * @property Doctrine_Collection $Files
 * @property Doctrine_Collection $LastReads
 * @property Doctrine_Collection $LogEntries
 * @property Discussion $Discussion
 *
 * @method integer             getId()              Returns the current record's "id" value
 * @method integer             getDiscussionId()    Returns the current record's "discussion_id" value
 * @method integer             getUserId()          Returns the current record's "user_id" value
 * @method integer             getPrivateUserId()   Returns the current record's "private_user_id" value
 * @method string              getUserName()        Returns the current record's "user_name" value
 * @method clob                getText()            Returns the current record's "text" value
 * @method boolean             getSystem()          Returns the current record's "system" value
 * @method User                getUser()            Returns the current record's "User" value
 * @method User                getPrivateUser()     Returns the current record's "PrivateUser" value
 * @method Doctrine_Collection getFiles()           Returns the current record's "Files" collection
 * @method Doctrine_Collection getLastReads()       Returns the current record's "LastReads" collection
 * @method Doctrine_Collection getLogEntries()      Returns the current record's "LogEntries" collection
 * @method Discussion          getDiscussion()      Returns the current record's "Discussion" value
 * @method Message             setId()              Sets the current record's "id" value
 * @method Message             setDiscussionId()    Sets the current record's "discussion_id" value
 * @method Message             setUserId()          Sets the current record's "user_id" value
 * @method Message             setPrivateUserId()   Sets the current record's "private_user_id" value
 * @method Message             setUserName()        Sets the current record's "user_name" value
 * @method Message             setText()            Sets the current record's "text" value
 * @method Message             setSystem()          Sets the current record's "system" value
 * @method Message             setUser()            Sets the current record's "User" value
 * @method Message             setPrivateUser()     Sets the current record's "PrivateUser" value
 * @method Message             setFiles()           Sets the current record's "Files" collection
 * @method Message             setLastReads()       Sets the current record's "LastReads" collection
 * @method Message             setLogEntries()      Sets the current record's "LogEntries" collection
 * @method Message             setDiscussion()      Sets the current record's "Discussion" value
 *
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMessage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('message');
        $this->hasColumn('id', 'integer', null, array(
            'type' => 'integer',
            'primary' => true,
            'autoincrement' => true,
        ));
        $this->hasColumn('discussion_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => true,
        ));
        $this->hasColumn('user_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => false,
        ));
        $this->hasColumn('private_user_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => false,
            'default' => 0,
        ));
        $this->hasColumn('user_name', 'string', 255, array(
            'type' => 'string',
            'notnull' => true,
            'length' => 255,
        ));
        $this->hasColumn('text', 'clob', null, array(
            'type' => 'clob',
            'notnull' => true,
        ));
        $this->hasColumn('system', 'boolean', null, array(
            'type' => 'boolean',
            'default' => false,
            'notnull' => true,
        ));

        $this->hasColumn('mark_as_read', 'boolean', null, array(
            'type' => 'boolean',
            'default' => false,
            'notnull' => true,
        ));
        $this->hasColumn('msg_show', 'boolean', null, array(
            'type' => 'boolean',
            'default' => true,
            'notnull' => true,
        ));
        $this->hasColumn('msg_status', 'enum', null, array(
            'type' => 'enum',
            'default' => 'none',
            'notnull' => true,
            'values' => array(
                0 => 'none',
                1 => 'declined',
                2 => 'sended',
                3 => 'declined_to_specialist',
                4 => 'sended_to_specialist',
                5 => 'declined_by_specialist',
                6 => 'accepted'
            )
        ));

        $this->hasColumn('reply_on_message_id', 'integer', null, array(
            'type' => 'integer',
            'notnull' => false,
            'default' => 0,
        ));

        $this->hasColumn('who_get_message', 'enum', null, array(
            'type' => 'enum',
            'default' => 'all',
            'notnull' => true,
            'values' => array(
                0 => 'all',
                1 => 'importer',
                2 => 'admin_dealer',
            )
        ));

        $this->hasColumn('msg_type', 'enum', null, array(
            'type' => 'enum',
            'default' => 'none',
            'notnull' => true,
            'values' => array(
                0 => 'none',
                1 => 'ask',
                2 => 'answer',
                3 => 'specialist',
                4 => 'manager',
                5 => 'importer',
                6 => 'regional_manager'
            )
        ));

        $this->hasColumn('who_get_message_ids', 'string', 80, array(
            'type' => 'string',
            'notnull' => true,
            'length' => 80,
        ));

        $this->hasColumn('contact_id', 'integer', 11, array(
            'type' => 'integer',
            'notnull' => false,
            'default' => 0,
        ));

        $this->index('content', array(
            'fields' =>
                array(
                    0 => 'text',
                ),
            'type' => 'fulltext',
        ));
        $this->index('system', array(
            'fields' =>
                array(
                    0 => 'system',
                ),
        ));
        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
            'local' => 'user_id',
            'foreign' => 'id'));

        $this->hasOne('User as PrivateUser', array(
            'local' => 'private_user_id',
            'foreign' => 'id'));

        $this->hasMany('MessageFile as Files', array(
            'local' => 'id',
            'foreign' => 'message_id',
            'cascade' => array(
                0 => 'delete',
            )));

        $this->hasMany('DiscussionLastRead as LastReads', array(
            'local' => 'id',
            'foreign' => 'message_id',
            'cascade' => array(
                0 => 'delete',
            )));

        $this->hasMany('LogEntry as LogEntries', array(
            'local' => 'id',
            'foreign' => 'message_id'));

        $this->hasOne('Discussion', array(
            'local' => 'discussion_id',
            'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
            'updated' =>
                array(
                    'disabled' => true,
                ),
        ));
        $this->actAs($timestampable0);
    }
}
