<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ActivityStatisticPreCheckUsers', 'doctrine');

/**
 * BaseActivityStatisticPreCheckUsers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $activity_id
 * @property integer $user_id
 * 
 * @method integer                        getId()          Returns the current record's "id" value
 * @method integer                        getActivityId()  Returns the current record's "activity_id" value
 * @method integer                        getUserId()      Returns the current record's "user_id" value
 * @method ActivityStatisticPreCheckUsers setId()          Sets the current record's "id" value
 * @method ActivityStatisticPreCheckUsers setActivityId()  Sets the current record's "activity_id" value
 * @method ActivityStatisticPreCheckUsers setUserId()      Sets the current record's "user_id" value
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseActivityStatisticPreCheckUsers extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('activity_statistic_pre_check_users');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('activity_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'notnull' => true,
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();

        $this->hasOne('User', array(
            'local' => 'user_id',
            'foreign' => 'id'
        ));

        $this->hasOne('Activity', array(
            'local' => 'activity_id',
            'foreign' => 'id'
        ));
    }
}