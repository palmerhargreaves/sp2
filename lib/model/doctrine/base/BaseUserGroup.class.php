<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('UserGroup', 'doctrine');

/**
 * BaseUserGroup
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property Doctrine_Collection $Roles
 * @property Doctrine_Collection $Users
 * 
 * @method integer             getId()    Returns the current record's "id" value
 * @method string              getName()  Returns the current record's "name" value
 * @method Doctrine_Collection getRoles() Returns the current record's "Roles" collection
 * @method Doctrine_Collection getUsers() Returns the current record's "Users" collection
 * @method UserGroup           setId()    Sets the current record's "id" value
 * @method UserGroup           setName()  Sets the current record's "name" value
 * @method UserGroup           setRoles() Sets the current record's "Roles" collection
 * @method UserGroup           setUsers() Sets the current record's "Users" collection
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUserGroup extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user_group');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Role as Roles', array(
             'refClass' => 'GroupRole',
             'local' => 'group_id',
             'foreign' => 'role_id'));

        $this->hasMany('User as Users', array(
             'local' => 'id',
             'foreign' => 'group_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}