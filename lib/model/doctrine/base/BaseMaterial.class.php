<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Material', 'doctrine');

/**
 * BaseMaterial
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $category_id
 * @property integer $activity_id
 * @property string $name
 * @property string $file_preview
 * @property MaterialCategory $Category
 * @property Activity $Activity
 * @property Doctrine_Collection $WebPreviews
 * @property Doctrine_Collection $Sources
 * @property Doctrine_Collection $UserViews
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method integer             getCategoryId()   Returns the current record's "category_id" value
 * @method integer             getActivityId()   Returns the current record's "activity_id" value
 * @method string              getName()         Returns the current record's "name" value
 * @method string              getFilePreview()  Returns the current record's "file_preview" value
 * @method MaterialCategory    getCategory()     Returns the current record's "Category" value
 * @method Activity            getActivity()     Returns the current record's "Activity" value
 * @method Doctrine_Collection getWebPreviews()  Returns the current record's "WebPreviews" collection
 * @method Doctrine_Collection getSources()      Returns the current record's "Sources" collection
 * @method Doctrine_Collection getUserViews()    Returns the current record's "UserViews" collection
 * @method Material            setId()           Sets the current record's "id" value
 * @method Material            setCategoryId()   Sets the current record's "category_id" value
 * @method Material            setActivityId()   Sets the current record's "activity_id" value
 * @method Material            setName()         Sets the current record's "name" value
 * @method Material            setFilePreview()  Sets the current record's "file_preview" value
 * @method Material            setCategory()     Sets the current record's "Category" value
 * @method Material            setActivity()     Sets the current record's "Activity" value
 * @method Material            setWebPreviews()  Sets the current record's "WebPreviews" collection
 * @method Material            setSources()      Sets the current record's "Sources" collection
 * @method Material            setUserViews()    Sets the current record's "UserViews" collection
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMaterial extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('material');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('activity_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('file_preview', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
       	$this->hasColumn('material_order', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));

        $this->hasColumn('downloads', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('editor_link', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => false,
             ));
        $this->hasColumn('new_ci', 'boolean', false, array(
            'type' => 'boolean',
            'notnull' => false,
            'default' => false
        ));
        $this->hasColumn('status', 'boolean', false, array(
            'type' => 'boolean',
            'notnull' => false,
            'default' => false
        ));

        $this->index('name', array(
             'fields' => 
             array(
              0 => 'name',
             ),
             ));
        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
        $this->option('orderBy', 'name asc');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MaterialCategory as Category', array(
             'local' => 'category_id',
             'foreign' => 'id'));

        $this->hasOne('Activity', array(
             'local' => 'activity_id',
             'foreign' => 'id'));

        /*$this->hasOne('Activity as Activities', array(
            'local' => 'activity_id',
            'foreign' => 'id'));*/

        $this->hasMany('MaterialWebPreview as WebPreviews', array(
             'local' => 'id',
             'foreign' => 'material_id',
             'cascade' => array(
             0 => 'delete',
             )));

        $this->hasMany('MaterialSource as Sources', array(
             'local' => 'id',
             'foreign' => 'material_id',
             'cascade' => array(
             0 => 'delete',
             )));

        $this->hasMany('MaterialUserView as UserViews', array(
             'local' => 'id',
             'foreign' => 'material_id'));

        $this->hasMany('ActivityMaterials as MaterialActivities', array(
            'local' => 'id',
            'foreign' => 'material_id'
        ));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}
