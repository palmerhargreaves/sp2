<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Contacts', 'doctrine');

/**
 * BaseContacts
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $name_parental_case
 * @property clob $description
 * @property string $photo
 * @property string $duties
 * @property integer $position
 * @property boolean $status
 * 
 * @method integer  getId()                 Returns the current record's "id" value
 * @method string   getName()               Returns the current record's "name" value
 * @method string   getNameParentalCase()   Returns the current record's "name_parental_case" value
 * @method clob     getDescription()        Returns the current record's "description" value
 * @method string   getPhoto()              Returns the current record's "photo" value
 * @method string   getDuties()             Returns the current record's "duties" value
 * @method integer  getPosition()           Returns the current record's "position" value
 * @method boolean  getStatus()             Returns the current record's "status" value
 * @method Contacts setId()                 Sets the current record's "id" value
 * @method Contacts setName()               Sets the current record's "name" value
 * @method Contacts setNameParentalCase()   Sets the current record's "name_parental_case" value
 * @method Contacts setDescription()        Sets the current record's "description" value
 * @method Contacts setPhoto()              Sets the current record's "photo" value
 * @method Contacts setDuties()             Sets the current record's "duties" value
 * @method Contacts setPosition()           Sets the current record's "position" value
 * @method Contacts setStatus()             Sets the current record's "status" value
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseContacts extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('contacts');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('user_id', 'integer', 11, array(
            'type' => 'integer',
            'length' => 11,
            'notnull' => true,
        ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             ));
        $this->hasColumn('name_parental_case', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             'notnull' => true,
             ));
        $this->hasColumn('photo', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             ));
        $this->hasColumn('duties', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             ));
        $this->hasColumn('color', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'notnull' => true,
        ));
        $this->hasColumn('position', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             'notnull' => true,
             ));
        $this->hasColumn('redirect_to_id', 'integer', 11, array(
            'type' => 'integer',
            'length' => 11,
            'notnull' => true,
        ));
        $this->hasColumn('status', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             'notnull' => true,
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();

        $this->hasOne('User', array(
            'local' => 'user_id',
            'foreign' => 'id'
        ));
        
    }
}
