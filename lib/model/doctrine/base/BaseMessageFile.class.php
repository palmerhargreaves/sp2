<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MessageFile', 'doctrine');

/**
 * BaseMessageFile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $message_id
 * @property string $file
 * @property Message $Message
 * 
 * @method integer     getId()         Returns the current record's "id" value
 * @method integer     getMessageId()  Returns the current record's "message_id" value
 * @method string      getFile()       Returns the current record's "file" value
 * @method Message     getMessage()    Returns the current record's "Message" value
 * @method MessageFile setId()         Sets the current record's "id" value
 * @method MessageFile setMessageId()  Sets the current record's "message_id" value
 * @method MessageFile setFile()       Sets the current record's "file" value
 * @method MessageFile setMessage()    Sets the current record's "Message" value
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMessageFile extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('message_file');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('message_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('file', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('path', 'string', 255, array(
            'type' => 'string',
            'notnull' => true,
            'length' => 255,
        ));
        $this->hasColumn('editor', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Message', array(
             'local' => 'message_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'updated' => 
             array(
              'disabled' => true,
             ),
             ));
        $this->actAs($timestampable0);
    }
}
