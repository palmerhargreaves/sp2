<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MimeTypes', 'doctrine');

/**
 * BaseMimeTypes
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $extension
 * @property string $description
 * @property boolean $status
 * 
 * @method integer   getId()          Returns the current record's "id" value
 * @method string    getName()        Returns the current record's "name" value
 * @method string    getExtension()   Returns the current record's "extension" value
 * @method string    getDescription() Returns the current record's "description" value
 * @method boolean   getStatus()      Returns the current record's "status" value
 * @method MimeTypes setId()          Sets the current record's "id" value
 * @method MimeTypes setName()        Sets the current record's "name" value
 * @method MimeTypes setExtension()   Sets the current record's "extension" value
 * @method MimeTypes setDescription() Sets the current record's "description" value
 * @method MimeTypes setStatus()      Sets the current record's "status" value
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMimeTypes extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mime_types');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             ));
        $this->hasColumn('extension', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'notnull' => true,
             ));
        $this->hasColumn('status', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}