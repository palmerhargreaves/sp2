<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('LogEntryRead', 'doctrine');

/**
 * BaseLogEntryRead
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $entry_id
 * @property integer $user_id
 * @property User $User
 * @property LogEntry $Entry
 * 
 * @method integer      getId()       Returns the current record's "id" value
 * @method integer      getEntryId()  Returns the current record's "entry_id" value
 * @method integer      getUserId()   Returns the current record's "user_id" value
 * @method User         getUser()     Returns the current record's "User" value
 * @method LogEntry     getEntry()    Returns the current record's "Entry" value
 * @method LogEntryRead setId()       Sets the current record's "id" value
 * @method LogEntryRead setEntryId()  Sets the current record's "entry_id" value
 * @method LogEntryRead setUserId()   Sets the current record's "user_id" value
 * @method LogEntryRead setUser()     Sets the current record's "User" value
 * @method LogEntryRead setEntry()    Sets the current record's "Entry" value
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLogEntryRead extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('log_entry_read');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('entry_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));


        $this->index('user_entry', array(
             'fields' => 
             array(
              0 => 'user_id',
              1 => 'entry_id',
             ),
             'type' => 'unique',
             ));
        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('LogEntry as Entry', array(
             'local' => 'entry_id',
             'foreign' => 'id'));
    }
}