<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ActivityEfficiencyFormulaParams', 'doctrine');

/**
 * BaseActivityEfficiencyFormulaParams
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $formula_id
 * @property enum $param_type1
 * @property string $param_value1
 * @property value $param_type2
 * @property string $param_value2
 * @property string $description
 * @property integer $calc_position
 * @property enum $params_action
 * @property boolean $param_allow_to_sum
 * 
 * @method integer                         getId()                 Returns the current record's "id" value
 * @method integer                         getFormulaId()          Returns the current record's "formula_id" value
 * @method enum                            getParamType1()         Returns the current record's "param_type1" value
 * @method string                          getParamValue1()        Returns the current record's "param_value1" value
 * @method value                           getParamType2()         Returns the current record's "param_type2" value
 * @method string                          getParamValue2()        Returns the current record's "param_value2" value
 * @method string                          getDescription()        Returns the current record's "description" value
 * @method integer                         getCalcPosition()       Returns the current record's "calc_position" value
 * @method enum                            getParamsAction()       Returns the current record's "params_action" value
 * @method boolean                         getParamAllowToSum()    Returns the current record's "param_allow_to_sum" value
 * @method ActivityEfficiencyFormulaParams setId()                 Sets the current record's "id" value
 * @method ActivityEfficiencyFormulaParams setFormulaId()          Sets the current record's "formula_id" value
 * @method ActivityEfficiencyFormulaParams setParamType1()         Sets the current record's "param_type1" value
 * @method ActivityEfficiencyFormulaParams setParamValue1()        Sets the current record's "param_value1" value
 * @method ActivityEfficiencyFormulaParams setParamType2()         Sets the current record's "param_type2" value
 * @method ActivityEfficiencyFormulaParams setParamValue2()        Sets the current record's "param_value2" value
 * @method ActivityEfficiencyFormulaParams setDescription()        Sets the current record's "description" value
 * @method ActivityEfficiencyFormulaParams setCalcPosition()       Sets the current record's "calc_position" value
 * @method ActivityEfficiencyFormulaParams setParamsAction()       Sets the current record's "params_action" value
 * @method ActivityEfficiencyFormulaParams setParamAllowToSum()    Sets the current record's "param_allow_to_sum" value
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseActivityEfficiencyFormulaParams extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('activity_efficiency_formula_params');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('formula_id', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => false,
             ));
        $this->hasColumn('param1_type', 'enum', null, array(
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'field_id',
              1 => 'formula_result',
              2 => 'custom_function',
             ),
             ));
        $this->hasColumn('param1_value', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('param2_type', 'value', null, array(
             'type' => 'value',
             'values' => 
             array(
              0 => 'field_id',
              1 => 'formula_result',
              2 => 'custom_function',
             ),
             'notnull' => true,
             ));
        $this->hasColumn('param2_value', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('calc_position', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('params_action', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'mult',
              1 => 'plus',
              2 => 'minus',
              3 => 'div',
             ),
             'notnull' => true,
             ));
        $this->hasColumn('param1_allow_to_sum', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('param2_allow_to_sum', 'boolean', null, array(
            'type' => 'boolean',
            'default' => false,
        ));


        $this->index('main', array(
             'fields' => 
             array(
              0 => 'formula_id',
             ),
             ));
        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();

        $this->hasOne('ActivityEfficiencyFormulas', array(
            'local' => 'formula_id',
            'foreign' => 'id'));
    }
}