<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Role', 'doctrine');

/**
 * BaseRole
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property enum $role
 * @property Doctrine_Collection $Groups
 * @property Doctrine_Collection $GroupRoles
 * 
 * @method integer             getId()         Returns the current record's "id" value
 * @method string              getName()       Returns the current record's "name" value
 * @method enum                getRole()       Returns the current record's "role" value
 * @method Doctrine_Collection getGroups()     Returns the current record's "Groups" collection
 * @method Doctrine_Collection getGroupRoles() Returns the current record's "GroupRoles" collection
 * @method Role                setId()         Sets the current record's "id" value
 * @method Role                setName()       Sets the current record's "name" value
 * @method Role                setRole()       Sets the current record's "role" value
 * @method Role                setGroups()     Sets the current record's "Groups" collection
 * @method Role                setGroupRoles() Sets the current record's "GroupRoles" collection
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRole extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('role');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('role', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'admin',
              1 => 'importer',
              2 => 'dealer',
              3 => 'manager',
              4 => 'specialist',
             ),
             'notnull' => true,
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('UserGroup as Groups', array(
             'refClass' => 'GroupRole',
             'local' => 'role_id',
             'foreign' => 'group_id'));

        $this->hasMany('GroupRole as GroupRoles', array(
             'local' => 'id',
             'foreign' => 'role_id'));
    }
}