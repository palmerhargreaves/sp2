<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('LogLastRead', 'doctrine');

/**
 * BaseLogLastRead
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property timestamp $last_read
 * @property integer $user_id
 * @property User $User
 * 
 * @method integer     getId()        Returns the current record's "id" value
 * @method timestamp   getLastRead()  Returns the current record's "last_read" value
 * @method integer     getUserId()    Returns the current record's "user_id" value
 * @method User        getUser()      Returns the current record's "User" value
 * @method LogLastRead setId()        Sets the current record's "id" value
 * @method LogLastRead setLastRead()  Sets the current record's "last_read" value
 * @method LogLastRead setUserId()    Sets the current record's "user_id" value
 * @method LogLastRead setUser()      Sets the current record's "User" value
 * 
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLogLastRead extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('log_last_read');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('last_read', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'unique' => true,
             'notnull' => true,
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));
    }
}