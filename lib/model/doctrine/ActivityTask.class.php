<?php

/**
 * ActivityTask
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Servicepool2.0
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ActivityTask extends BaseActivityTask
{
    function wasDone ( Dealer $dealer, Activity $activity, $current_q = null )
    {
        if ($this->getIsConceptComplete() && $activity->getHasConcept() && $activity->getIsConceptComplete() && !$activity->isConceptComplete($dealer)) {
            return false;
        }

        $year = D::getYear(D::calcQuarterData(date('Y-m-d')));
        /*if ($activity->getFinished()) {
            return $this->checkTaskResult($this->getId(), $dealer->getId());
        }*/

        $currentQuarter = D::getQuarter(D::calcQuarterData(date('d-m-Y')));
        if (!is_null($current_q)) {
            $currentQuarter = $current_q;
        }

        $query = AgreementModelTable::getInstance()
            ->createQuery('am')
            ->select('am.id modelId, am.status am_status, r.status r_status, am.created_at am_created_at, am.model_type_id')
            ->leftJoin('am.Report r')
            ->where('activity_id = ? and dealer_id = ?',
                array
                (
                    $activity->getId(),
                    $dealer->getId()
                )
            );

        if ($this->getIsConceptComplete()) {
            $query->andWhere('model_type_id = ?', Activity::CONCEPT_MODEL_TYPE_ID);
        } else {
            $query->andWhere('model_type_id != ?', Activity::CONCEPT_MODEL_TYPE_ID);
        }
        $models = $query->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

        $models_list = array();
        $items = array();
        foreach ($models as $model) {
            $data = LogEntryTable::getInstance()
                ->createQuery()
                ->select('created_at, object_id')
                ->where('object_id = ?', $model[ 'modelId' ])
                ->andWhere('private_user_id = ?', 0)
                ->andWhere('icon = ?', 'clip')
                ->orderBy('id DESC')
                ->limit(1)
                ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

            $modelYear = D::getYear(date('Y-m-d', strtotime($model[ 'am_created_at' ])));
            $quarter = D::getQuarter(D::calcQuarterData($model[ 'am_created_at' ]));

            if ($data && $model[ 'am_status' ] == 'accepted' && $model[ 'r_status' ] == 'accepted') {
                $modelYear = D::getYear(date('Y-m-d', D::calcQuarterData($data[ 'created_at' ])));
                $quarter = D::getQuarter(D::calcQuarterData($data[ 'created_at' ]));

                $items[ $modelYear ][] = $quarter;
            }

            $models_list[ $modelYear ][] = $quarter;
        }

        $activityStartYear = D::getYear($activity->getStartDate());
        $activityEndYear = D::getYear($activity->getEndDate());

        //Проверка на выполнения заявок по задаче, согласно году и кварталу
        $completed = false;
        foreach ($items as $keyYear => $qList) {
            if ($activityStartYear != $activityEndYear && $activityEndYear >= $year && $activity->getAllowExtendedStatistic()) {
                $completed = $this->checkTaskResultByYearAndQ($items, $keyYear, $currentQuarter, $models_list);
            } else {
                $completed = $this->checkTaskResultByYearAndQ($items, $keyYear, $currentQuarter);
            }
        }

        return $completed;
    }

    private function checkTaskResult ( $taskId, $dealerId )
    {
        $result = ActivityTaskResultTable::getInstance()
            ->createQuery()
            ->where('task_id=? and dealer_id=?', array( $taskId, $dealerId ))
            ->fetchOne();

        return $result ? $result->getDone() : false;
    }

    private function checkTaskResultByYearAndQ ( $items, $year, $currentQuarter, $models_list = array() )
    {
        //Проверка на наличие заявок по году и списку кварталов
        if (isset($models_list[ $year ]) && !in_array($currentQuarter, $models_list[ $year ])) {
            return true;
        }
        /*if (isset($items[$year]) && !in_array($currentQuarter, $items[$year])) {
            return true;
        }*/

        //Проверка на выполненные заявки в квартале
        foreach ($items as $keyYear => $qList) {
            if ($keyYear == $year) {
                return in_array($currentQuarter, $qList);
            }
        }

        return false;
    }

    function updateReportStatus ( Dealer $dealer, $status )
    {
        $result = ActivityTaskResultTable::getInstance()
            ->createQuery()
            ->where('task_id=? and dealer_id=?', array( $this->getId(), $dealer->getId() ))
            ->fetchOne();

        /*if(!empty($result)) {
            $result->setDone($status);
            $result->save();
        }*/

    }

}
