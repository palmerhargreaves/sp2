<?php

/**
 * TempFileTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TempFileTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TempFileTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TempFile');
    }

    public static function removeFile($file) {
        unlink(sfConfig::get('sf_upload_dir') . '/' . TempFile::FILE_PATH.'/'.$file->getFile());
        $file->delete();
    }

    public static function copyFileTo($file, $path, $user = null)
    {
        $upload_path = null;
        if (!is_null($user)) {
            $upload_path = sprintf('/%s/%s/%s', $user->getEmail(), date('Y'), date('m'));
            $upload_dir = sfConfig::get('sf_upload_dir') . '/' . $path . $upload_path;
        } else {
            $upload_dir = sfConfig::get('sf_upload_dir') . '/' . $path;
        }

        if (!file_exists($upload_dir)) {
            mkdir($upload_dir, 0777, true);
        }

        $generator = new UniqueFileNameGenerator($upload_dir);
        $gen_file_name = $generator->generate($file->getFile());

        $att = 0;
        //Make files to copy
        while(1) {
            if (copy(sfConfig::get('sf_upload_dir') . '/' . TempFile::FILE_PATH . '/' . $file->getFile(), $upload_dir . '/' . $gen_file_name)) {
                break;
            }

            if ($att > 5) { break; }

            $att++;
            sleep(3);
        }

        if (!is_null($upload_path)) {
            return array('gen_file_name' => $gen_file_name, 'upload_path' => $upload_path);
        }

        return $gen_file_name;
    }

    public static function copyFilesByRequest(sfWebRequest $request, $to_path, $param_name = 'upload_files_ids', $user = null) {
        $copied_files = array();

        $files = TempFileTable::getInstance()->createQuery()->whereIn('id', explode(':', $request->getParameter($param_name)))->execute();
        foreach ($files as $file) {
            $copied_files[] = self::copyFileTo($file, $to_path, $user);
            self::removeFile($file);
        }

        return $copied_files;
    }
}
